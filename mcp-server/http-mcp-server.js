#!/usr/bin/env node
import express from 'express';
import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import yaml from 'js-yaml';
import { createRequire } from 'module';

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∏–∑ stdio-mcp-server
const require = createRequire(import.meta.url);
const { handleExternalAutoAnalysis } = require('./stdio-mcp-server.js');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const configPath = path.join(path.dirname(new URL(import.meta.url).pathname), '..', 'config.yaml');
const configContent = await fs.readFile(configPath, 'utf8');
const config = yaml.load(configContent);

const RAG_SERVER_URL = 'http://localhost:8000';
const MCP_PORT = 8200;
const CHUNK_LIMIT_TOKENS = config.mcp?.chunk_limit_tokens || 4000;
const KEY_MOMENTS_LIMIT = config.mcp?.key_moments_limit || 10;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
function getCurrentProjectName() {
  const cwd = process.cwd();
  const projectName = path.basename(cwd);
  return projectName.replace(/[^\w\-_.]/g, '_') || 'default';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
function getCurrentProjectRoot() {
  return process.cwd();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
async function getOrCreateSession() {
  let sessionId;
  try {
    const sessionResponse = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
    sessionId = sessionResponse.data.session_id;
  } catch {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const createResponse = await axios.post(`${RAG_SERVER_URL}/sessions/create?project_name=${getCurrentProjectName()}`, {
      description: "Claude Code CLI HTTP MCP —Å–µ—Å—Å–∏—è"
    });
    sessionId = createResponse.data.session_id;
  }
  return sessionId;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json({ limit: '50mb' }));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use((err, req, res, next) => {
  if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {
    return res.status(400).json({ error: 'Invalid JSON', details: err.message });
  }
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
let db;

async function initDatabase() {
  const dbPath = path.join(path.dirname(new URL(import.meta.url).pathname), '..', 
    config.session_memory?.db_path || './session_storage.db');
  
  db = await open({
    filename: dbPath,
    driver: sqlite3.Database
  });

  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è MCP –≤—ã–∑–æ–≤–æ–≤
  await db.exec(`
    CREATE TABLE IF NOT EXISTS mcp_calls (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      tool_name TEXT,
      args_json TEXT,
      result_json TEXT,
      success BOOLEAN,
      session_id TEXT,
      ts DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Å session_id
async function logToolCall(toolName, args, result, success, sessionId = null) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º session_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if (!sessionId) {
      try {
        sessionId = await getOrCreateSession();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è session_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        sessionId = null;
      }
    }
    
    await db.run(
      'INSERT INTO mcp_calls (tool_name, args_json, result_json, success, session_id) VALUES (?, ?, ?, ?, ?)',
      toolName,
      JSON.stringify(args),
      JSON.stringify(result),
      success ? 1 : 0,
      sessionId
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function estimateTokens(text) {
  // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞
  return Math.ceil(text.length / 4);
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
function cleanLLMResponse(response) {
  if (!response || typeof response !== 'string') {
    return response;
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç –ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', response.length);
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞
  // –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const answerMarkers = [
    '[Answer]',
    '[–û—Ç–≤–µ—Ç]',
    'Answer:',
    '–û—Ç–≤–µ—Ç:',
    '[Response]',
    'Response:'
  ];
  
  let cleanedResponse = response;
  
  // –£–¥–∞–ª—è–µ–º –í–°–ï –º–∞—Ä–∫–µ—Ä—ã –æ—Ç–≤–µ—Ç–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
  for (const marker of answerMarkers) {
    while (cleanedResponse.includes(marker)) {
      const before = cleanedResponse.length;
      cleanedResponse = cleanedResponse.replace(marker, '');
      console.log(`üßπ –£–¥–∞–ª–µ–Ω –º–∞—Ä–∫–µ—Ä "${marker}", —É–¥–∞–ª–µ–Ω–æ ${before - cleanedResponse.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä –æ—Ç–≤–µ—Ç–∞, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
  const firstAnswerIndex = response.indexOf('[Answer]');
  if (firstAnswerIndex !== -1) {
    const secondAnswerIndex = response.indexOf('[Answer]', firstAnswerIndex + 1);
    if (secondAnswerIndex !== -1) {
      // –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
      cleanedResponse = response.substring(firstAnswerIndex + '[Answer]'.length, secondAnswerIndex).trim();
      console.log(`üßπ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤, –≤–∑—è—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π`);
    } else {
      // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
      cleanedResponse = response.substring(firstAnswerIndex + '[Answer]'.length).trim();
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const contextMarkers = [
    /\[.*?Documentation Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[User Question\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[Additional Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[Instructions\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[.*?Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi
  ];
  
  for (const pattern of contextMarkers) {
    const before = cleanedResponse.length;
    cleanedResponse = cleanedResponse.replace(pattern, '');
    if (before !== cleanedResponse.length) {
      console.log(`üßπ –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç, —É–¥–∞–ª–µ–Ω–æ ${before - cleanedResponse.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏–ø–∞ "Created Question", "Created Answer"
  cleanedResponse = cleanedResponse.replace(/Created\s+(Question|Answer|Query|Response).*?```/gis, '');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ
  cleanedResponse = cleanedResponse.replace(/```+\s*$/g, '').trim();
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ
  cleanedResponse = cleanedResponse.replace(/```\s*$/g, '').trim();
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
  const codeBlocks = cleanedResponse.match(/```[\s\S]*?```/g) || [];
  const seenBlocks = new Set();
  
  codeBlocks.forEach(block => {
    if (seenBlocks.has(block)) {
      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞
      cleanedResponse = cleanedResponse.replace(block, '');
    } else {
      seenBlocks.add(block);
    }
  });
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏–ø–∞ "Human:", "Assistant:", "User:"
  cleanedResponse = cleanedResponse.replace(/^(Human|Assistant|User|AI):\s*/gm, '');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
  cleanedResponse = cleanedResponse.replace(/\n{3,}/g, '\n\n');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤ [Example]
  const examplePattern = /\[Example\][\s\S]*?(?=\[Example\]|$)/g;
  const examples = cleanedResponse.match(examplePattern) || [];
  const uniqueExamples = [...new Set(examples)];
  
  if (examples.length > uniqueExamples.length) {
    // –ï—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
    const beforeExamples = cleanedResponse.substring(0, cleanedResponse.indexOf('[Example]'));
    cleanedResponse = beforeExamples + uniqueExamples.join('\n\n');
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ
  // –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
  const backtickCount = (cleanedResponse.match(/```/g) || []).length;
  if (backtickCount % 2 !== 0) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ```
    const lastBackticks = cleanedResponse.lastIndexOf('```');
    if (lastBackticks > 0) {
      const remaining = cleanedResponse.substring(lastBackticks + 3);
      if (!remaining.includes('```')) {
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫
        cleanedResponse = cleanedResponse.substring(0, lastBackticks).trim();
      }
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä—ã–≤–æ–≤ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ü–µ
  if (cleanedResponse && cleanedResponse.length > 20) {
    const lastChar = cleanedResponse[cleanedResponse.length - 1];
    if (!',.!?;:)]\'"¬ª\n'.includes(lastChar)) {
      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      const sentenceEnds = [];
      for (let i = 0; i < cleanedResponse.length; i++) {
        if ('.!?'.includes(cleanedResponse[i]) && i < cleanedResponse.length - 1) {
          if (i + 1 < cleanedResponse.length && ' \n'.includes(cleanedResponse[i + 1])) {
            sentenceEnds.push(i + 1);
          }
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
      if (sentenceEnds.length > 0 && sentenceEnds[sentenceEnds.length - 1] < cleanedResponse.length - 10) {
        cleanedResponse = cleanedResponse.substring(0, sentenceEnds[sentenceEnds.length - 1]).trim();
      }
    }
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤
  cleanedResponse = cleanedResponse.trim();
  
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—á–∏—Å—Ç–æ–∫
  if (!cleanedResponse) {
    cleanedResponse = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.";
  }
  
  console.log('‚úÖ –û—á–∏—â–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', cleanedResponse.length);
  console.log(`üìâ –£–¥–∞–ª–µ–Ω–æ ${response.length - cleanedResponse.length} —Å–∏–º–≤–æ–ª–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`);
  
  return cleanedResponse;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏
function chunkResponse(data, chunkLimit = CHUNK_LIMIT_TOKENS) {
  const jsonStr = JSON.stringify(data);
  const totalTokens = estimateTokens(jsonStr);
  
  if (totalTokens <= chunkLimit) {
    return [data];
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
  const chunks = [];
  const totalChunks = Math.ceil(totalTokens / chunkLimit);
  
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (Array.isArray(data)) {
    const itemsPerChunk = Math.ceil(data.length / totalChunks);
    for (let i = 0; i < data.length; i += itemsPerChunk) {
      chunks.push({
        segment: `${chunks.length + 1}/${totalChunks}`,
        data: data.slice(i, i + itemsPerChunk)
      });
    }
  } else {
    // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –ø–æ–º–µ—Ç–∫–æ–π
    chunks.push({
      segment: '1/1',
      data: data,
      warning: 'Response too large, consider pagination'
    });
  }
  
  return chunks;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const toolHandlers = {
  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç RAG
  async ask_rag(args) {
    const response = await axios.post(`${RAG_SERVER_URL}/ask`, {
      question: args.query || args.question,
      framework: args.framework,
      model: args.model,
      max_results: args.max_results || 5,
      project_name: getCurrentProjectName()
    });

    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const cleanedAnswer = cleanLLMResponse(response.data.answer);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (response.data.answer !== cleanedAnswer) {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      console.log(`–ë—ã–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: ${response.data.answer.length}, —Å—Ç–∞–ª–æ: ${cleanedAnswer.length}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (config.session_memory?.auto_save_interactions) {
      try {
        const sessionId = await getOrCreateSession();
        await axios.post(`${RAG_SERVER_URL}/session/message`, {
          project_name: getCurrentProjectName(),
          role: 'assistant',
          content: cleanedAnswer,
          actions: ['ask_rag'],
          files: response.data.sources?.map(s => s.source) || []
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é:', error);
      }
    }

    return {
      answer: cleanedAnswer,
      sources: response.data.sources?.map(s => ({
        path: s.source,
        line: s.line || 0,
        framework: s.framework
      })) || [],
      session_id: response.data.session_id
    };
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤)
  async get_recent_changes(args) {
    const limit = args.limit || KEY_MOMENTS_LIMIT;
    
    try {
      const response = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
      const data = response.data;
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–∞–º
      let moments = null;
      
      if (data && data.context && data.context.key_moments && Array.isArray(data.context.key_moments)) {
        moments = data.context.key_moments;
      } else if (data && data.key_moments && Array.isArray(data.key_moments)) {
        moments = data.key_moments;
      }
      
      if (!moments || moments.length === 0) {
        return {
          changes: [],
          error: '–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
      }
      
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
      const recentMoments = moments
        .slice(0, limit)
        .map(moment => ({
          timestamp: moment.timestamp,
          type: moment.type,
          title: moment.title,
          summary: moment.summary,
          files: moment.files_involved
        }));

      return {
        changes: recentMoments
      };
    } catch (error) {
      return {
        changes: [],
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã'
      };
    }
  },

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
  async run_tests(args) {
    // Stub implementation
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    
    return {
      status: 'OK',
      log: 'All tests passed (stub implementation)\n‚úì Test suite 1: 10/10 passed\n‚úì Test suite 2: 5/5 passed'
    };
  },

  // –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  async build_project(args) {
    // Stub implementation
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    
    return {
      status: 'OK',
      log: 'Build completed successfully (stub implementation)\n‚úì Compiled 42 files\n‚úì Bundle size: 1.2MB\n‚úì Build time: 2.1s'
    };
  },

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞
  async apply_patch(args) {
    const { diff } = args;
    
    if (!diff) {
      throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä diff –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
    try {
      const sessionId = await getOrCreateSession();
      await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/key-moment`, {
        moment_type: 'refactoring',
        title: '–ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—á',
        summary: `–ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—á: ${diff.substring(0, 100)}...`,
        files_involved: args.files || [],
        importance: 7
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞:', error);
    }

    return {
      status: 'applied',
      message: '–ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω'
    };
  },

  // –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
  async run_linters(args) {
    // Stub implementation
    await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    
    return {
      status: 'OK',
      issues: []
    };
  },

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
  async open_file(args) {
    const { path: filePath } = args;
    
    if (!filePath) {
      throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä path –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const normalizedPath = path.normalize(filePath);
    const absolutePath = path.isAbsolute(normalizedPath) ? normalizedPath : path.resolve(normalizedPath);
    
    // –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π (—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)
    const forbiddenPaths = [
      '/etc/',
      '/sys/',
      '/proc/',
      '/root/',
      'C:\\Windows\\',
      'C:\\System'
    ];
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è .ssh (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    if (absolutePath.includes('.ssh')) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
    const isSystemPath = forbiddenPaths.some(forbidden => 
      absolutePath.toLowerCase().includes(forbidden.toLowerCase())
    );
    
    if (isSystemPath) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (normalizedPath.includes('..') && (normalizedPath.includes('etc') || normalizedPath.includes('ssh'))) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å');
    }

    try {
      const content = await fs.readFile(filePath, 'utf8');
      return {
        content: content
      };
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
    }
  },

  // –°–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
  async list_frameworks(args) {
    const response = await axios.get(`${RAG_SERVER_URL}/frameworks`);
    return {
      frameworks: Object.entries(response.data).map(([key, info]) => ({
        key: key,
        name: info.name,
        description: info.description
      }))
    };
  },

  // –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
  async list_models(args) {
    const response = await axios.get(`${RAG_SERVER_URL}/models`);
    return {
      models: Object.entries(response.data.models).map(([key, info]) => ({
        key: key,
        name: info.name,
        max_tokens: info.max_tokens,
        temperature: info.temperature
      })),
      default: response.data.default
    };
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  async get_stats(args) {
    const response = await axios.get(`${RAG_SERVER_URL}/stats`);
    return {
      stats: response.data
    };
  },

  // –°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
  async save_tool_call(args) {
    const { tool_name, parameters, result } = args;
    
    // –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ logToolCall
    // –ù–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    return {
      saved: true
    };
  },

  // –°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  async save_file_change(args) {
    const { file_path, old_content, new_content } = args;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    try {
      const sessionId = await getOrCreateSession();
      await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/key-moment`, {
        moment_type: 'file_created',
        title: `–ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª ${path.basename(file_path)}`,
        summary: `–§–∞–π–ª ${file_path} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω`,
        files_involved: [file_path],
        importance: 5
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞:', error);
    }

    return {
      saved: true
    };
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
app.post('/tool/:name', async (req, res) => {
  const toolName = req.params.name;
  const args = req.body;
  
  console.log(`üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${toolName}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  const enabledTools = config.mcp?.tools_enabled || [];
  if (!enabledTools.includes(toolName)) {
    const error = { error: `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏` };
    await logToolCall(toolName, args, error, false);
    return res.status(403).json(error);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  const handler = toolHandlers[toolName];
  if (!handler) {
    const error = { error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${toolName}` };
    await logToolCall(toolName, args, error, false);
    return res.status(404).json(error);
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let sessionId = null;
    try {
      sessionId = await getOrCreateSession();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è session_id:', error);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    const result = await handler(args);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
    await logToolCall(toolName, args, result, true, sessionId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    const chunks = chunkResponse(result);
    
    if (chunks.length === 1) {
      // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
      res.json(chunks[0]);
    } else {
      // Chunked response
      res.setHeader('Transfer-Encoding', 'chunked');
      res.setHeader('Content-Type', 'application/json');
      
      for (const chunk of chunks) {
        res.write(JSON.stringify(chunk) + '\n');
      }
      res.end();
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ ${toolName}:`, error);
    const errorResult = { 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.response?.data || undefined
    };
    
    // –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    let sessionId = null;
    try {
      sessionId = await getOrCreateSession();
    } catch (sessionError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è session_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏:', sessionError);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    await logToolCall(toolName, args, errorResult, false, sessionId);
    
    res.status(500).json(errorResult);
  }
});

// Endpoint –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ (–æ—Ç Claude File Watcher)
app.post('/auto-analyze-moments', async (req, res) => {
  try {
    const analysisData = req.body;
    
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –≤–Ω–µ—à–Ω–µ–≥–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è: ${analysisData.files?.join(', ') || 'unknown'}`);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∏–∑ stdio-mcp-server
    const result = await handleExternalAutoAnalysis(analysisData);
    
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞:', error);
    res.status(500).json({
      success: false,
      moments_detected: 0,
      error: error.message
    });
  }
});

// Health check endpoint
app.get('/health', async (req, res) => {
  try {
    const currentProject = getCurrentProjectName();
    const projectRoot = getCurrentProjectRoot();
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    let sessionInfo = null;
    try {
      const sessionId = await getOrCreateSession();
      sessionInfo = {
        session_id: sessionId,
        project_name: currentProject,
        project_root: projectRoot
      };
    } catch (error) {
      sessionInfo = {
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏',
        project_name: currentProject,
        project_root: projectRoot
      };
    }
    
    res.json({
      status: 'ok',
      version: '1.0.0',
      rag_server: RAG_SERVER_URL,
      tools_enabled: config.mcp?.tools_enabled || [],
      session_info: sessionInfo
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–∑–æ–≤–æ–≤
app.get('/stats/calls', async (req, res) => {
  try {
    const stats = await db.all(`
      SELECT 
        tool_name,
        COUNT(*) as call_count,
        SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as success_count,
        SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as error_count,
        MAX(ts) as last_call
      FROM mcp_calls
      GROUP BY tool_name
      ORDER BY call_count DESC
    `);
    
    res.json({ stats });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  try {
    await initDatabase();
    
    app.listen(MCP_PORT, '127.0.0.1', () => {
      console.log(`üöÄ HTTP-MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:${MCP_PORT}`);
      console.log(`üìä RAG backend: ${RAG_SERVER_URL}`);
      console.log(`üîß –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${config.mcp?.tools_enabled?.join(', ') || '–Ω–µ—Ç'}`);
      console.log(`üèóÔ∏è –ü—Ä–æ–µ–∫—Ç: ${getCurrentProjectName()}`);
      console.log(`üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: ${getCurrentProjectRoot()}`);
      console.log(`üîê Session management: –ê–ö–¢–ò–í–ï–ù`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (db) {
    await db.close();
  }
  process.exit(0);
});

start();
