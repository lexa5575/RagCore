import fs from 'fs/promises';
import fsSync from 'fs';
import path from 'path';
import { EventEmitter } from 'events';

export class FileWatcherV2 extends EventEmitter {
  constructor(projectRoot = process.env.WORKSPACE_FOLDER || process.cwd(), memoryBankManager) {
    super();
    this.projectRoot = projectRoot;
    this.memoryBankManager = memoryBankManager;
    this.watchedFiles = new Map();
    this.fsWatchers = new Map(); // –ù–∞—Ç–∏–≤–Ω—ã–µ fs.watch() —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    this.isWatching = false;
    this.changeBuffer = new Map(); // –ë—É—Ñ–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    this.bufferTimeout = null;
    this.bufferDelay = 500; // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 500–º—Å
    
    // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–ê–¢–ß–ò–ù–ì–ê - —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –≤–º–µ—Å—Ç–æ —Å–ø–∞–º–∞
    this.changesBatch = []; // –ë—É—Ñ–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
    this.batchTimer = null;
    this.batchInterval = 60000; // 1 –º–∏–Ω—É—Ç–∞
    this.lastBatchTime = Date.now();
    
    console.error(`üöÄ FileWatcherV2 constructor called - Real-time file watching with smart batching enabled`);
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.forceReset();
    
    // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ Memory Bank –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    this.memoryBankPaths = [
      path.join(this.projectRoot, 'memory-bank'),
      path.join(this.projectRoot, '${workspaceFolder}', 'memory-bank')
    ];
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    this.ignoredPatterns = [
      /node_modules/,
      /\.git/,
      /\.vscode/,
      /\.idea/,
      /dist/,
      /build/,
      /coverage/,
      /\.DS_Store/,
      /\.env/,
      /\.log$/,
      /\.tmp$/,
      /chroma_storage/,
      /embedding_cache/,
      /__pycache__/,
      /\.pyc$/,
      /\.swp$/,
      /\.swo$/,
      /~$/,
      /\.backup$/,
      /\.bak$/
    ];

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    this.contentAnalysisConfig = {
      maxFileSize: 1024 * 1024, // 1MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      enableDiffAnalysis: true,
      enableSemanticAnalysis: true
    };
  }

  // –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
  async startWatching() {
    if (this.isWatching) {
      return { success: false, message: 'File Watcher V2 —É–∂–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    try {
      console.log('üöÄ Starting File Watcher V2 with real-time monitoring...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      await this.scanProject();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      await this.setupRealTimeWatching();
      
      this.isWatching = true;
      
      console.log('‚úÖ File Watcher V2 started with real-time monitoring');
      return { 
        success: true, 
        message: 'File Watcher V2 started successfully with real-time monitoring',
        watchedFiles: this.watchedFiles.size,
        realTimeWatchers: this.fsWatchers.size
      };
    } catch (error) {
      console.error('‚ùå File Watcher V2 startup error:', error);
      return { 
        success: false, 
        message: `Startup error: ${error.message}` 
      };
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  async setupRealTimeWatching() {
    const watchDirectory = async (dirPath) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
        const relativePath = path.relative(this.projectRoot, dirPath);
        if (this.shouldIgnore(relativePath)) {
          return;
        }

        // –°–æ–∑–¥–∞–µ–º fs.watch –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const watcher = fsSync.watch(dirPath, { recursive: false }, (eventType, filename) => {
          if (filename) {
            const fullPath = path.join(dirPath, filename);
            this.handleFileSystemEvent(eventType, fullPath);
          }
        });

        this.fsWatchers.set(dirPath, watcher);

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        const files = await fs.readdir(dirPath);
        for (const file of files) {
          const fullPath = path.join(dirPath, file);
          const stats = await fs.stat(fullPath).catch(() => null);
          
          if (stats && stats.isDirectory()) {
            await watchDirectory(fullPath);
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ${dirPath}:`, error.message);
      }
    };

    await watchDirectory(this.projectRoot);
    console.log(`üëÅÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è ${this.fsWatchers.size} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π`);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  handleFileSystemEvent(eventType, fullPath) {
    try {
      const relativePath = path.relative(this.projectRoot, fullPath);
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
      if (this.shouldIgnore(relativePath)) {
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const changeKey = `${eventType}:${fullPath}`;
      this.changeBuffer.set(changeKey, {
        eventType,
        fullPath,
        relativePath,
        timestamp: Date.now()
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±—É—Ñ–µ—Ä–∞
      if (this.bufferTimeout) {
        clearTimeout(this.bufferTimeout);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞
      this.bufferTimeout = setTimeout(() => {
        this.processBufferedChanges();
      }, this.bufferDelay);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  async processBufferedChanges() {
    if (this.changeBuffer.size === 0) {
      return;
    }

    console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ ${this.changeBuffer.size} –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    
    const changes = [];
    const bufferedChanges = Array.from(this.changeBuffer.values());
    this.changeBuffer.clear();

    for (const bufferedChange of bufferedChanges) {
      const change = await this.analyzeFileChange(bufferedChange);
      if (change) {
        changes.push(change);
      }
    }

    if (changes.length > 0) {
      await this.processChanges(changes);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
  async analyzeFileChange(bufferedChange) {
    const { eventType, fullPath, relativePath } = bufferedChange;

    try {
      const stats = await fs.stat(fullPath).catch(() => null);
      const existingFile = this.watchedFiles.get(fullPath);

      if (!stats) {
        // –§–∞–π–ª —É–¥–∞–ª–µ–Ω
        if (existingFile) {
          this.watchedFiles.delete(fullPath);
          return {
            type: 'deleted',
            path: relativePath,
            fullPath,
            timestamp: new Date().toISOString(),
            previousContent: existingFile.content || null
          };
        }
        return null;
      }

      if (stats.isDirectory()) {
        // –ù–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if (!this.fsWatchers.has(fullPath)) {
          await this.setupDirectoryWatching(fullPath);
        }
        return null;
      }

      // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
      const currentMtime = stats.mtime.getTime();
      const currentSize = stats.size;

      if (!existingFile) {
        // –ù–æ–≤—ã–π —Ñ–∞–π–ª
        const content = await this.readFileContent(fullPath, stats.size);
        const fileInfo = {
          path: relativePath,
          size: currentSize,
          mtime: currentMtime,
          exists: true,
          content: content
        };
        
        this.watchedFiles.set(fullPath, fileInfo);
        
        return {
          type: 'created',
          path: relativePath,
          fullPath,
          size: currentSize,
          timestamp: new Date().toISOString(),
          content: content,
          contentPreview: this.generateContentPreview(content)
        };
      }

      // –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω
      if (currentMtime !== existingFile.mtime || currentSize !== existingFile.size) {
        const newContent = await this.readFileContent(fullPath, stats.size);
        const oldContent = existingFile.content || '';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º diff –∞–Ω–∞–ª–∏–∑
        const diffAnalysis = this.generateDiffAnalysis(oldContent, newContent);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        this.watchedFiles.set(fullPath, {
          ...existingFile,
          size: currentSize,
          mtime: currentMtime,
          content: newContent
        });

        return {
          type: 'modified',
          path: relativePath,
          fullPath,
          oldSize: existingFile.size,
          newSize: currentSize,
          timestamp: new Date().toISOString(),
          content: newContent,
          previousContent: oldContent,
          diffAnalysis: diffAnalysis,
          contentPreview: this.generateContentPreview(newContent)
        };
      }

      return null;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fullPath}:`, error);
      return null;
    }
  }

  // –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
  async readFileContent(filePath, fileSize) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (fileSize > this.contentAnalysisConfig.maxFileSize) {
        return `[–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${fileSize} –±–∞–π—Ç]`;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      if (!this.isTextFile(filePath)) {
        return `[–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${path.extname(filePath)}]`;
      }

      const content = await fs.readFile(filePath, 'utf8');
      return content;
    } catch (error) {
      return `[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}]`;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  isTextFile(filePath) {
    const textExtensions = [
      '.js', '.ts', '.jsx', '.tsx', '.py', '.php', '.java', '.c', '.cpp',
      '.html', '.css', '.scss', '.sass', '.vue', '.svelte', '.md', '.mdx',
      '.json', '.yaml', '.yml', '.xml', '.txt', '.csv', '.sql', '.sh',
      '.env', '.gitignore', '.dockerfile', '.conf', '.ini', '.cfg'
    ];
    
    const ext = path.extname(filePath).toLowerCase();
    return textExtensions.includes(ext) || !ext; // —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  generateContentPreview(content) {
    if (!content || typeof content !== 'string') {
      return null;
    }

    const lines = content.split('\n');
    const preview = {
      totalLines: lines.length,
      firstLines: lines.slice(0, 5).join('\n'),
      lastLines: lines.length > 10 ? lines.slice(-3).join('\n') : null,
      isEmpty: content.trim().length === 0,
      hasCode: this.detectCodePatterns(content)
    };

    return preview;
  }

  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–¥–∞
  detectCodePatterns(content) {
    const codePatterns = [
      /function\s+\w+\s*\(/,
      /class\s+\w+/,
      /import\s+.*from/,
      /export\s+(default\s+)?/,
      /const\s+\w+\s*=/,
      /let\s+\w+\s*=/,
      /var\s+\w+\s*=/,
      /def\s+\w+\s*\(/,
      /public\s+class/,
      /private\s+\w+/
    ];

    return codePatterns.some(pattern => pattern.test(content));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è diff –∞–Ω–∞–ª–∏–∑–∞
  generateDiffAnalysis(oldContent, newContent) {
    if (!oldContent || !newContent) {
      return null;
    }

    const oldLines = oldContent.split('\n');
    const newLines = newContent.split('\n');
    
    const analysis = {
      linesAdded: Math.max(0, newLines.length - oldLines.length),
      linesRemoved: Math.max(0, oldLines.length - newLines.length),
      charactersAdded: Math.max(0, newContent.length - oldContent.length),
      charactersRemoved: Math.max(0, oldContent.length - newContent.length),
      significantChanges: this.detectSignificantChanges(oldContent, newContent)
    };

    return analysis;
  }

  // –î–µ—Ç–µ–∫—Ü–∏—è –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  detectSignificantChanges(oldContent, newContent) {
    const changes = [];

    // –î–µ—Ç–µ–∫—Ü–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const oldFunctions = this.extractFunctions(oldContent);
    const newFunctions = this.extractFunctions(newContent);
    
    for (const func of newFunctions) {
      if (!oldFunctions.includes(func)) {
        changes.push({ type: 'function_added', name: func });
      }
    }

    for (const func of oldFunctions) {
      if (!newFunctions.includes(func)) {
        changes.push({ type: 'function_removed', name: func });
      }
    }

    // –î–µ—Ç–µ–∫—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    const oldImports = this.extractImports(oldContent);
    const newImports = this.extractImports(newContent);
    
    for (const imp of newImports) {
      if (!oldImports.includes(imp)) {
        changes.push({ type: 'import_added', name: imp });
      }
    }

    return changes;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–¥–∞
  extractFunctions(content) {
    const functions = [];
    const patterns = [
      /function\s+(\w+)\s*\(/g,
      /const\s+(\w+)\s*=\s*\(/g,
      /(\w+)\s*:\s*function\s*\(/g,
      /def\s+(\w+)\s*\(/g
    ];

    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        functions.push(match[1]);
      }
    }

    return functions;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –∫–æ–¥–∞
  extractImports(content) {
    const imports = [];
    const patterns = [
      /import\s+.*from\s+['"]([^'"]+)['"]/g,
      /import\s+['"]([^'"]+)['"]/g,
      /require\s*\(\s*['"]([^'"]+)['"]\s*\)/g
    ];

    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        imports.push(match[1]);
      }
    }

    return imports;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  async setupDirectoryWatching(dirPath) {
    try {
      const watcher = fsSync.watch(dirPath, { recursive: false }, (eventType, filename) => {
        if (filename) {
          const fullPath = path.join(dirPath, filename);
          this.handleFileSystemEvent(eventType, fullPath);
        }
      });

      this.fsWatchers.set(dirPath, watcher);
      console.log(`üëÅÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dirPath}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  stopWatching() {
    if (!this.isWatching) {
      return { success: false, message: 'File Watcher V2 –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ fs.watch —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    for (const [dirPath, watcher] of this.fsWatchers.entries()) {
      try {
        watcher.close();
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è watcher –¥–ª—è ${dirPath}:`, error);
      }
    }
    this.fsWatchers.clear();

    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
    if (this.bufferTimeout) {
      clearTimeout(this.bufferTimeout);
      this.bufferTimeout = null;
    }
    this.changeBuffer.clear();

    // –û—á–∏—â–∞–µ–º –±–∞—Ç—á
    if (this.batchTimer) {
      clearTimeout(this.batchTimer);
      this.batchTimer = null;
    }
    this.changesBatch = [];

    this.isWatching = false;
    this.watchedFiles.clear();
    
    console.log('üõë File Watcher V2 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    return { 
      success: true, 
      message: 'File Watcher V2 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
    };
  }

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async scanProject() {
    const scanDirectory = async (dirPath, relativePath = '') => {
      try {
        const files = await fs.readdir(dirPath);
        
        for (const file of files) {
          const fullPath = path.join(dirPath, file);
          const relativeFilePath = path.join(relativePath, file);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          if (this.shouldIgnore(relativeFilePath)) {
            continue;
          }

          const stats = await fs.stat(fullPath);
          
          if (stats.isDirectory()) {
            await scanDirectory(fullPath, relativeFilePath);
          } else {
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const content = await this.readFileContent(fullPath, stats.size);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            this.watchedFiles.set(fullPath, {
              path: relativeFilePath,
              size: stats.size,
              mtime: stats.mtime.getTime(),
              exists: true,
              content: content,
              contentPreview: this.generateContentPreview(content)
            });
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dirPath}:`, error.message);
      }
    };

    await scanDirectory(this.projectRoot);
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω: ${this.watchedFiles.size} —Ñ–∞–π–ª–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ`);
  }

  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–ê–¢–ß–ò–ù–ì–ê - –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
  async processChanges(changes) {
    console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${changes.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á`);
    
    for (const change of changes) {
      console.log(`  ${change.type}: ${change.path}`);
      if (change.diffAnalysis && change.diffAnalysis.significantChanges.length > 0) {
        console.log(`    –ó–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${change.diffAnalysis.significantChanges.length}`);
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      this.emit('fileChange', change);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ Memory Bank
      this.addToBatch(change);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞—Ç—á
  addToBatch(change) {
    this.changesBatch.push(change);
    console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞—Ç—á: ${change.path} (–≤—Å–µ–≥–æ –≤ –±–∞—Ç—á–µ: ${this.changesBatch.length})`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±–∞—Ç—á–∞
    if (this.batchTimer) {
      clearTimeout(this.batchTimer);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    this.batchTimer = setTimeout(() => {
      this.processBatch();
    }, this.batchInterval);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
  async processBatch() {
    if (this.changesBatch.length === 0) {
      return;
    }

    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞: ${this.changesBatch.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –±–∞—Ç—á–∞
    const summary = this.generateBatchSummary(this.changesBatch);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–Ω—É —Å–≤–æ–¥–∫—É –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    await this.writeMemoryBankSummary(summary);
    
    // –û—á–∏—â–∞–µ–º –±–∞—Ç—á
    this.changesBatch = [];
    this.lastBatchTime = Date.now();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –±–∞—Ç—á–∞
  generateBatchSummary(changes) {
    const summary = {
      timestamp: new Date().toLocaleString('ru-RU'),
      totalChanges: changes.length,
      created: changes.filter(c => c.type === 'created'),
      modified: changes.filter(c => c.type === 'modified'),
      deleted: changes.filter(c => c.type === 'deleted'),
      significantChanges: [],
      keyMoments: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for (const change of changes) {
      if (change.diffAnalysis?.significantChanges?.length > 0) {
        summary.significantChanges.push(...change.diffAnalysis.significantChanges.map(sc => ({
          ...sc,
          file: change.path
        })));
      }
    }

    return summary;
  }

  // –ó–∞–ø–∏—Å—å —Å–≤–æ–¥–∫–∏ –≤ Memory Bank
  async writeMemoryBankSummary(summary) {
    try {
      if (!this.memoryBankManager) {
        return;
      }

      const timestamp = summary.timestamp;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é markdown —Å–≤–æ–¥–∫—É
      let markdownSummary = `\n## üìä –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π - ${timestamp}\n`;
      
      if (summary.totalChanges > 0) {
        markdownSummary += `**–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:** ${summary.totalChanges}\n\n`;
        
        if (summary.created.length > 0) {
          markdownSummary += `**–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${summary.created.length}\n`;
          summary.created.slice(0, 3).forEach(c => {
            markdownSummary += `  - ${c.path}`;
            if (c.contentPreview?.hasCode) {
              markdownSummary += ` (${c.contentPreview.totalLines} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞)`;
            }
            markdownSummary += `\n`;
          });
          if (summary.created.length > 3) {
            markdownSummary += `  - ... –∏ –µ—â–µ ${summary.created.length - 3}\n`;
          }
          markdownSummary += `\n`;
        }
        
        if (summary.modified.length > 0) {
          markdownSummary += `**–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${summary.modified.length}\n`;
          summary.modified.slice(0, 3).forEach(c => {
            markdownSummary += `  - ${c.path}`;
            if (c.diffAnalysis) {
              markdownSummary += ` (+${c.diffAnalysis.linesAdded}/-${c.diffAnalysis.linesRemoved})`;
            }
            markdownSummary += `\n`;
          });
          if (summary.modified.length > 3) {
            markdownSummary += `  - ... –∏ –µ—â–µ ${summary.modified.length - 3}\n`;
          }
          markdownSummary += `\n`;
        }

        if (summary.deleted.length > 0) {
          markdownSummary += `**–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${summary.deleted.length}\n`;
          summary.deleted.slice(0, 3).forEach(c => {
            markdownSummary += `  - ${c.path}\n`;
          });
          if (summary.deleted.length > 3) {
            markdownSummary += `  - ... –∏ –µ—â–µ ${summary.deleted.length - 3}\n`;
          }
          markdownSummary += `\n`;
        }
        
        if (summary.significantChanges.length > 0) {
          markdownSummary += `**–ó–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n`;
          summary.significantChanges.slice(0, 5).forEach(sc => {
            markdownSummary += `  - ${this.getChangeTitle({ type: sc.type })}: ${sc.name} –≤ ${sc.file}\n`;
          });
          if (summary.significantChanges.length > 5) {
            markdownSummary += `  - ... –∏ –µ—â–µ ${summary.significantChanges.length - 5}\n`;
          }
          markdownSummary += `\n`;
        }
      } else {
        markdownSummary += `–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n\n`;
      }
      
      markdownSummary += `---\n`;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ activeContext.md
      const contextResult = await this.memoryBankManager.readMemoryBankFile('activeContext.md');
      if (contextResult.success) {
        let updatedContent = contextResult.content;
        
        if (updatedContent.includes('## Working On')) {
          updatedContent = updatedContent.replace(
            '## Working On',
            `## Working On${markdownSummary}`
          );
        } else {
          updatedContent += `\n## Recent Changes${markdownSummary}`;
        }
        
        await this.memoryBankManager.writeMemoryBankFile('activeContext.md', updatedContent);
        console.log(`üíæ –°–≤–æ–¥–∫–∞ –±–∞—Ç—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Memory Bank: ${summary.totalChanges} –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–≤–æ–¥–∫–∏ –±–∞—Ç—á–∞:', error);
    }
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
  groupChangesByType(changes) {
    const grouped = {
      created: changes.filter(c => c.type === 'created'),
      modified: changes.filter(c => c.type === 'modified'),
      deleted: changes.filter(c => c.type === 'deleted')
    };

    return grouped;
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  async detectKeyMomentsV2(change) {
    const moments = [];
    
    try {
      const fileExt = path.extname(change.path).toLowerCase();
      const fileName = path.basename(change.path);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      if (change.type === 'created') {
        const moment = {
          type: 'FILE_CREATED',
          title: `–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${fileName}`,
          description: `–ù–æ–≤—ã–π —Ñ–∞–π–ª: ${change.path}`,
          file: change.path,
          timestamp: change.timestamp,
          details: {
            size: change.size,
            hasCode: change.contentPreview?.hasCode || false,
            lines: change.contentPreview?.totalLines || 0
          }
        };

        if (change.contentPreview?.hasCode) {
          moment.title = `–°–æ–∑–¥–∞–Ω –∫–æ–¥ —Ñ–∞–π–ª ${fileName}`;
          moment.description += ` (${change.contentPreview.totalLines} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞)`;
        }

        moments.push(moment);
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (change.type === 'deleted') {
        moments.push({
          type: 'FILE_DELETED',
          title: `–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª ${fileName}`,
          description: `–§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${change.path}`,
          file: change.path,
          timestamp: change.timestamp
        });
      }
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º diff
      if (change.type === 'modified' && change.diffAnalysis) {
        const { significantChanges, linesAdded, linesRemoved } = change.diffAnalysis;
        
        if (significantChanges.length > 0) {
          for (const sigChange of significantChanges) {
            moments.push({
              type: `CODE_${sigChange.type.toUpperCase()}`,
              title: `${this.getChangeTitle(sigChange)} –≤ ${fileName}`,
              description: `${sigChange.type}: ${sigChange.name} –≤ —Ñ–∞–π–ª–µ ${change.path}`,
              file: change.path,
              timestamp: change.timestamp,
              details: {
                changeType: sigChange.type,
                name: sigChange.name,
                linesAdded,
                linesRemoved
              }
            });
          }
        } else if (linesAdded > 5 || linesRemoved > 5) {
          moments.push({
            type: 'SIGNIFICANT_EDIT',
            title: `–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ${fileName}`,
            description: `–ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: ${change.path} (+${linesAdded}/-${linesRemoved} —Å—Ç—Ä–æ–∫)`,
            file: change.path,
            timestamp: change.timestamp,
            details: { linesAdded, linesRemoved }
          });
        }
      }
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
      if (this.isConfigFile(fileName)) {
        moments.push({
          type: 'CONFIG_CHANGED',
          title: `–ò–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${fileName}`,
          description: `–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${change.path}`,
          file: change.path,
          timestamp: change.timestamp
        });
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ V2:', error);
    }
    
    return moments;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  getChangeTitle(sigChange) {
    const titles = {
      'function_added': '–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è',
      'function_removed': '–£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è',
      'import_added': '–î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç',
      'import_removed': '–£–¥–∞–ª–µ–Ω –∏–º–ø–æ—Ä—Ç'
    };
    
    return titles[sigChange.type] || '–ò–∑–º–µ–Ω–µ–Ω–∏–µ';
  }

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Memory Bank
  async saveKeyMomentToMemoryBankV2(moment, change) {
    try {
      if (!this.memoryBankManager) {
        return;
      }

      // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π progress.md
      const progressResult = await this.memoryBankManager.readMemoryBankFile('progress.md');
      
      if (progressResult.success) {
        const timestamp = new Date().toLocaleString('ru-RU');
        let newEntry = `\n## ${moment.title}\n**–í—Ä–µ–º—è:** ${timestamp}\n**–û–ø–∏—Å–∞–Ω–∏–µ:** ${moment.description}\n**–§–∞–π–ª:** ${change.path}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (moment.details) {
          newEntry += `**–î–µ—Ç–∞–ª–∏:** ${JSON.stringify(moment.details, null, 2)}\n`;
        }
        
        const updatedContent = progressResult.content + newEntry;
        
        await this.memoryBankManager.writeMemoryBankFile('progress.md', updatedContent);
        console.log(`üíæ –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç V2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Memory Bank: ${moment.title}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Memory Bank V2:', error);
    }
  }

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Memory Bank
  async updateMemoryBankProgressV2(change, groupedChanges) {
    try {
      if (!this.memoryBankManager) {
        return;
      }

      // –ß–∏—Ç–∞–µ–º activeContext.md
      const contextResult = await this.memoryBankManager.readMemoryBankFile('activeContext.md');
      
      if (contextResult.success) {
        const timestamp = new Date().toLocaleString('ru-RU');
        
        // –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é —Å–≤–æ–¥–∫—É –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∞
        let changeInfo = `\n**${timestamp}:** `;
        
        if (change.type === 'created' && change.contentPreview?.hasCode) {
          changeInfo += `–°–æ–∑–¥–∞–Ω –∫–æ–¥ —Ñ–∞–π–ª ${change.path} (${change.contentPreview.totalLines} —Å—Ç—Ä–æ–∫)`;
        } else if (change.type === 'modified' && change.diffAnalysis) {
          const { linesAdded, linesRemoved, significantChanges } = change.diffAnalysis;
          if (significantChanges.length > 0) {
            changeInfo += `–ò–∑–º–µ–Ω–µ–Ω ${change.path}: ${significantChanges.map(c => c.type).join(', ')}`;
          } else {
            changeInfo += `–ò–∑–º–µ–Ω–µ–Ω ${change.path} (+${linesAdded}/-${linesRemoved} —Å—Ç—Ä–æ–∫)`;
          }
        } else {
          changeInfo += `${change.type} - ${change.path}`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        if (!contextResult.content.includes(changeInfo.trim())) {
          let updatedContent = contextResult.content;
          
          if (updatedContent.includes('## Working On')) {
            updatedContent = updatedContent.replace(
              '## Working On',
              `## Working On${changeInfo}`
            );
          } else {
            updatedContent += `\n## Recent Changes${changeInfo}`;
          }
          
          await this.memoryBankManager.writeMemoryBankFile('activeContext.md', updatedContent);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ V2:', error);
    }
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –¥–ª—è Memory Bank
  shouldIgnore(filePath) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ Memory Bank
    const fullPath = path.resolve(this.projectRoot, filePath);
    
    for (const mbPath of this.memoryBankPaths) {
      if (fullPath.startsWith(mbPath)) {
        console.log(`üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Memory Bank —Ñ–∞–π–ª: ${filePath}`);
        return true; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º Memory Bank
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    return this.ignoredPatterns.some(pattern => pattern.test(filePath));
  }

  isConfigFile(fileName) {
    const configFiles = [
      'package.json', 'package-lock.json', 'yarn.lock',
      'composer.json', 'composer.lock',
      'requirements.txt', 'Pipfile', 'poetry.lock',
      'config.yaml', 'config.yml', 'config.json',
      '.env', '.env.example',
      'webpack.config.js', 'vite.config.js',
      'tsconfig.json', 'jsconfig.json',
      'tailwind.config.js', 'postcss.config.js'
    ];
    
    return configFiles.includes(fileName.toLowerCase());
  }

  isCodeFile(extension) {
    const codeExtensions = [
      '.js', '.ts', '.jsx', '.tsx',
      '.py', '.php', '.java', '.c', '.cpp',
      '.html', '.css', '.scss', '.sass',
      '.vue', '.svelte', '.md', '.mdx'
    ];
    
    return codeExtensions.includes(extension);
  }

  forceReset() {
    console.error(`üîß FileWatcherV2.forceReset() called - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ watchers
    for (const [dirPath, watcher] of this.fsWatchers.entries()) {
      try {
        watcher.close();
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      }
    }
    this.fsWatchers.clear();

    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
    if (this.bufferTimeout) {
      clearTimeout(this.bufferTimeout);
      this.bufferTimeout = null;
    }
    this.changeBuffer.clear();

    // –û—á–∏—â–∞–µ–º –±–∞—Ç—á
    if (this.batchTimer) {
      clearTimeout(this.batchTimer);
      this.batchTimer = null;
    }
    this.changesBatch = [];
    
    this.isWatching = false;
    this.watchedFiles.clear();
    
    console.error(`‚úÖ FileWatcherV2 forceReset complete - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ`);
  }

  getStats() {
    console.error(`üîç FileWatcherV2.getStats() called:`);
    console.error(`  - isWatching: ${this.isWatching}`);
    console.error(`  - watchedFiles.size: ${this.watchedFiles.size}`);
    console.error(`  - fsWatchers.size: ${this.fsWatchers.size}`);
    console.error(`  - changeBuffer.size: ${this.changeBuffer.size}`);
    
    return {
      isWatching: this.isWatching,
      watchedFiles: this.watchedFiles.size,
      realTimeWatchers: this.fsWatchers.size,
      bufferedChanges: this.changeBuffer.size,
      ignoredPatterns: this.ignoredPatterns.length,
      version: '2.0',
      features: ['real-time', 'content-analysis', 'diff-analysis', 'semantic-analysis'],
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
      pollInterval: null // V2 –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç polling
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  getFileDetails(filePath) {
    const fullPath = path.resolve(this.projectRoot, filePath);
    const fileInfo = this.watchedFiles.get(fullPath);
    
    if (!fileInfo) {
      return null;
    }

    return {
      ...fileInfo,
      fullPath,
      isTextFile: this.isTextFile(fullPath),
      isCodeFile: this.isCodeFile(path.extname(filePath)),
      isConfigFile: this.isConfigFile(path.basename(filePath))
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
  getFileTypeStats() {
    const stats = {
      total: this.watchedFiles.size,
      textFiles: 0,
      codeFiles: 0,
      configFiles: 0,
      binaryFiles: 0,
      extensions: new Map()
    };

    for (const [fullPath, fileInfo] of this.watchedFiles.entries()) {
      const ext = path.extname(fullPath).toLowerCase();
      const fileName = path.basename(fullPath);
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
      stats.extensions.set(ext, (stats.extensions.get(ext) || 0) + 1);
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
      if (this.isTextFile(fullPath)) {
        stats.textFiles++;
      } else {
        stats.binaryFiles++;
      }
      
      if (this.isCodeFile(ext)) {
        stats.codeFiles++;
      }
      
      if (this.isConfigFile(fileName)) {
        stats.configFiles++;
      }
    }

    return stats;
  }
}
