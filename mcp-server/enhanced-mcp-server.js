#!/usr/bin/env node
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListResourcesRequestSchema,
  ListToolsRequestSchema,
  ReadResourceRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';
import axios from 'axios';
import yaml from 'js-yaml';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { MemoryBankManager } from './memory-bank-manager.js';
import { FileWatcher } from './file-watcher.js';
import { FileWatcherV2 } from './file-watcher-v2.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RAG —Å–µ—Ä–≤–µ—Ä–∞
const RAG_SERVER_URL = 'http://localhost:8000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è config.yaml
async function loadConfig() {
  try {
    const configPath = path.join(__dirname, '..', 'config.yaml');
    const configFile = await fs.readFile(configPath, 'utf8');
    return yaml.load(configFile);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.yaml:', error.message);
    return null;
  }
}

// –ö—ç—à –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏
const projectInstances = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
function getProjectInstances(workingDirectory) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
  const normalizedPath = workingDirectory.replace(/\\/g, '/');
  
  if (!projectInstances.has(normalizedPath)) {
    console.error(`üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${normalizedPath}`);
    
    const memoryBankManager = new MemoryBankManager(normalizedPath);
    const fileWatcher = new FileWatcherV2(normalizedPath, memoryBankManager); // –ò—Å–ø–æ–ª—å–∑—É–µ–º V2!
    
    projectInstances.set(normalizedPath, {
      memoryBankManager,
      fileWatcher,
      lastUsed: Date.now()
    });
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    projectInstances.get(normalizedPath).lastUsed = Date.now();
  }
  
  return projectInstances.get(normalizedPath);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é)
let manualProjectPath = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
function getWorkingDirectory(request) {
  console.error(`üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê getWorkingDirectory ===`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.error(`üìã request.params:`, JSON.stringify(request.params, null, 2));
  console.error(`üìã request.meta:`, JSON.stringify(request.meta, null, 2));
  console.error(`üìã process.env.WORKSPACE_FOLDER:`, process.env.WORKSPACE_FOLDER);
  console.error(`üìã process.env.PWD:`, process.env.PWD);
  console.error(`üìã process.cwd():`, process.cwd());
  console.error(`üìã manualProjectPath:`, manualProjectPath);
  
  let workingDir = null;
  let source = 'unknown';
  
  // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –†—É—á–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
  if (manualProjectPath) {
    workingDir = manualProjectPath;
    source = 'manual';
  }
  
  // 2. –ò–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ Cline –ø–µ—Ä–µ–¥–∞–µ—Ç)
  if (!workingDir && request.meta && request.meta.workingDirectory) {
    workingDir = request.meta.workingDirectory;
    source = 'request.meta.workingDirectory';
  }
  
  // 3. –ò–∑ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Ç–∞-–ø–æ–ª–µ–π
  if (!workingDir && request.meta) {
    const possibleFields = ['projectPath', 'cwd', 'workspace', 'rootPath'];
    for (const field of possibleFields) {
      if (request.meta[field]) {
        workingDir = request.meta[field];
        source = `request.meta.${field}`;
        break;
      }
    }
  }
  
  // 4. –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!workingDir && process.env.WORKSPACE_FOLDER) {
    workingDir = process.env.WORKSPACE_FOLDER;
    source = 'process.env.WORKSPACE_FOLDER';
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å ${workspaceFolder}
    if (workingDir.includes('${workspaceFolder}')) {
      workingDir = process.cwd();
      source = 'process.cwd() (fallback from ${workspaceFolder})';
    }
  }
  
  // 5. –ò–∑ PWD –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  if (!workingDir && process.env.PWD) {
    workingDir = process.env.PWD;
    source = 'process.env.PWD';
  }
  
  // 6. Fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  if (!workingDir) {
    workingDir = process.cwd();
    source = 'process.cwd() (fallback)';
  }
  
  console.error(`üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${workingDir}`);
  console.error(`üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`);
  console.error(`üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===`);
  
  return workingDir;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é
function setManualProjectPath(path) {
  manualProjectPath = path;
  console.error(`üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—á–Ω–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${path}`);
}

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
setInterval(() => {
  const now = Date.now();
  const thirtyMinutes = 30 * 60 * 1000;
  
  for (const [path, instances] of projectInstances.entries()) {
    if (now - instances.lastUsed > thirtyMinutes) {
      console.error(`üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è: ${path}`);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º File Watcher –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
      if (instances.fileWatcher.isWatching) {
        instances.fileWatcher.stopWatching();
      }
      
      projectInstances.delete(path);
    }
  }
}, 30 * 60 * 1000);

// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const server = new Server(
  {
    name: 'enhanced-rag-assistant',
    version: '2.0.0',
  },
  {
    capabilities: {
      resources: {},
      tools: {},
    },
  }
);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      // RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
      {
        name: 'ask_rag',
        description: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å RAG —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        inputSchema: {
          type: 'object',
          properties: {
            question: {
              type: 'string',
              description: '–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            },
            framework: {
              type: 'string',
              description: '–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (vue, laravel, alpine, filament, inertia, tailwindcss)',
              enum: ['vue', 'laravel', 'alpine', 'filament', 'inertia', 'tailwindcss'],
            },
            model: {
              type: 'string',
              description: '–ú–æ–¥–µ–ª—å LLM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (qwen –∏–ª–∏ deepseek)',
              enum: ['qwen', 'deepseek'],
            },
            max_results: {
              type: 'number',
              description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-20)',
              minimum: 1,
              maximum: 20,
              default: 5,
            },
          },
          required: ['question'],
        },
      },
      {
        name: 'list_frameworks',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'get_rag_stats',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö RAG',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'list_models',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      
      // Memory Bank –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–æ–≤—ã–µ)
      {
        name: 'memory_bank_init',
        description: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Memory Bank –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'memory_bank_status',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Memory Bank –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'memory_bank_read',
        description: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Memory Bank',
        inputSchema: {
          type: 'object',
          properties: {
            filename: {
              type: 'string',
              description: '–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: tasks.md, progress.md, activeContext.md)',
            },
          },
          required: ['filename'],
        },
      },
      {
        name: 'memory_bank_write',
        description: '–ó–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤ Memory Bank',
        inputSchema: {
          type: 'object',
          properties: {
            filename: {
              type: 'string',
              description: '–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏',
            },
            content: {
              type: 'string',
              description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞',
            },
          },
          required: ['filename', 'content'],
        },
      },
      {
        name: 'memory_bank_search',
        description: '–ü–æ–∏—Å–∫ –≤ Memory Bank –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º',
        inputSchema: {
          type: 'object',
          properties: {
            query: {
              type: 'string',
              description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
            },
          },
          required: ['query'],
        },
      },
      {
        name: 'memory_bank_archive',
        description: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É',
        inputSchema: {
          type: 'object',
          properties: {
            taskId: {
              type: 'string',
              description: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏',
            },
            summary: {
              type: 'string',
              description: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
            },
            completedWork: {
              type: 'string',
              description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã',
            },
            keyDecisions: {
              type: 'string',
              description: '–ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è',
            },
            lessonsLearned: {
              type: 'string',
              description: '–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏',
            },
            filesModified: {
              type: 'string',
              description: '–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã',
            },
            timeSpent: {
              type: 'string',
              description: '–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
            },
          },
          required: ['taskId'],
        },
      },
      
      // File Watcher –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      {
        name: 'file_watcher_start',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'file_watcher_stop',
        description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'file_watcher_stats',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É File Watcher',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      
      // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
      {
        name: 'set_project_path',
        description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã File Watcher –∏ Memory Bank',
        inputSchema: {
          type: 'object',
          properties: {
            path: {
              type: 'string',
              description: '–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /Users/username/Projects/my-project)',
            },
          },
          required: ['path'],
        },
      },
      {
        name: 'get_current_project',
        description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –≤ –∫—ç—à–µ',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      // RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      case 'ask_rag': {
        const { question, framework, model, max_results = 5 } = args;
        
        const response = await axios.post(`${RAG_SERVER_URL}/ask`, {
          question,
          framework,
          model,
          max_results,
        });

        const data = response.data;
        
        let formattedAnswer = data.answer;
        
        if (data.sources && data.sources.length > 0) {
          formattedAnswer += '\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:';
          data.sources.forEach((source, index) => {
            formattedAnswer += `\n${index + 1}. [${source.framework}] ${source.source}`;
            if (source.heading) {
              formattedAnswer += ` - ${source.heading}`;
            }
          });
        }
        
        if (data.framework_detected) {
          formattedAnswer += `\n\nüéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ${data.framework_detected}`;
        }
        
        return {
          content: [
            {
              type: 'text',
              text: formattedAnswer,
            },
          ],
        };
      }

      case 'list_frameworks': {
        let frameworks = {};
        let source = 'unknown';
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ config.yaml
        try {
          const config = await loadConfig();
          if (config && config.frameworks) {
            frameworks = config.frameworks;
            source = 'config.yaml';
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ config.yaml:', error.message);
        }
        
        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π config –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ RAG —Å–µ—Ä–≤–µ—Ä—É
        if (Object.keys(frameworks).length === 0) {
          try {
            const response = await axios.get(`${RAG_SERVER_URL}/frameworks`);
            frameworks = response.data;
            source = 'RAG server';
          } catch (error) {
            return {
              content: [
                {
                  type: 'text',
                  text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤:\n- –õ–æ–∫–∞–ª—å–Ω—ã–π config.yaml –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç\n- RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`,
                },
              ],
            };
          }
        }
        
        let text = `üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source}):\n\n`;
        
        for (const [key, info] of Object.entries(frameworks)) {
          text += `**${info.name || key}** (${key})\n`;
          text += `${info.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
          text += `–¢–∏–ø: ${info.type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
          text += `–°—Ç–∞—Ç—É—Å: ${info.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n\n`;
        }
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      case 'get_rag_stats': {
        const response = await axios.get(`${RAG_SERVER_URL}/stats`);
        const stats = response.data;
        
        let text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n';
        text += `üìö –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.total_documents}\n`;
        text += `üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.cache_size}\n\n`;
        
        if (stats.frameworks) {
          text += 'üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º:\n';
          for (const [framework, count] of Object.entries(stats.frameworks)) {
            text += `  ‚Ä¢ ${framework}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n`;
          }
        }
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      case 'list_models': {
        const response = await axios.get(`${RAG_SERVER_URL}/models`);
        const modelsData = response.data;
        
        let text = 'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏:\n\n';
        
        for (const [key, info] of Object.entries(modelsData.models)) {
          text += `**${info.name}** (${key})\n`;
          text += `–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: ${info.max_tokens}\n`;
          text += `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${info.temperature}\n\n`;
        }
        
        text += `–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **${modelsData.default}**\n`;
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      // Memory Bank –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      case 'memory_bank_init': {
        const workingDir = getWorkingDirectory(request);
        const { memoryBankManager } = getProjectInstances(workingDir);
        
        const result = await memoryBankManager.initializeMemoryBank();
        
        return {
          content: [
            {
              type: 'text',
              text: result.success 
                ? `‚úÖ ${result.message}\nüìÅ –ü—É—Ç—å: ${result.path}\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`
                : `‚ùå ${result.message}`,
            },
          ],
        };
      }

      case 'memory_bank_status': {
        const workingDir = getWorkingDirectory(request);
        const { memoryBankManager } = getProjectInstances(workingDir);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        const ensureResult = await memoryBankManager.ensureMemoryBankExists();
        if (!ensureResult.success) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ${ensureResult.message}`,
              },
            ],
          };
        }

        const status = await memoryBankManager.getMemoryBankStatus();
        
        let text = 'üìä –°—Ç–∞—Ç—É—Å Memory Bank:\n\n';
        
        if (ensureResult.created) {
          text += `üÜï Memory Bank –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n`;
        } else {
          text += `‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Memory Bank\n`;
        }
        
        text += `üìÅ –ü—É—Ç—å: ${status.path}\n`;
        text += `üéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}\n\n`;
        
        text += 'üìÑ –§–∞–π–ª—ã:\n';
        status.files.forEach(file => {
          text += `  ‚Ä¢ ${file.name} (${file.lines} —Å—Ç—Ä–æ–∫, –∏–∑–º–µ–Ω–µ–Ω: ${new Date(file.modified).toLocaleString('ru-RU')})\n`;
        });
        
        if (status.directories.length > 0) {
          text += '\nüìÇ –ü–∞–ø–∫–∏:\n';
          status.directories.forEach(dir => {
            text += `  ‚Ä¢ ${dir.name}/ (${dir.files} —Ñ–∞–π–ª–æ–≤)\n`;
          });
        }
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      case 'memory_bank_read': {
        const workingDir = getWorkingDirectory(request);
        const { memoryBankManager } = getProjectInstances(workingDir);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        const ensureResult = await memoryBankManager.ensureMemoryBankExists();
        if (!ensureResult.success) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ${ensureResult.message}`,
              },
            ],
          };
        }

        const { filename } = args;
        const result = await memoryBankManager.readMemoryBankFile(filename);
        
        let responseText = '';
        if (ensureResult.created) {
          responseText += `üÜï Memory Bank –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
        }
        
        responseText += result.success 
          ? `üìÑ **${filename}**\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}\n\n${result.content}`
          : `‚ùå ${result.message}`;
        
        return {
          content: [
            {
              type: 'text',
              text: responseText,
            },
          ],
        };
      }

      case 'memory_bank_write': {
        const workingDir = getWorkingDirectory(request);
        const { memoryBankManager } = getProjectInstances(workingDir);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        const ensureResult = await memoryBankManager.ensureMemoryBankExists();
        if (!ensureResult.success) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ${ensureResult.message}`,
              },
            ],
          };
        }

        const { filename, content } = args;
        const result = await memoryBankManager.writeMemoryBankFile(filename, content);
        
        let responseText = '';
        if (ensureResult.created) {
          responseText += `üÜï Memory Bank –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
        }
        
        responseText += result.success 
          ? `‚úÖ ${result.message}\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`
          : `‚ùå ${result.message}`;
        
        return {
          content: [
            {
              type: 'text',
              text: responseText,
            },
          ],
        };
      }

      case 'memory_bank_search': {
        const workingDir = getWorkingDirectory(request);
        const { memoryBankManager } = getProjectInstances(workingDir);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        const ensureResult = await memoryBankManager.ensureMemoryBankExists();
        if (!ensureResult.success) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ${ensureResult.message}`,
              },
            ],
          };
        }

        const { query } = args;
        const result = await memoryBankManager.searchMemoryBank(query);
        
        if (!result.success) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ${result.message}`,
              },
            ],
          };
        }

        let text = '';
        if (ensureResult.created) {
          text += `üÜï Memory Bank –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
        }
        
        text += `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è "${query}":\n`;
        text += `üéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}\n`;
        text += `–ù–∞–π–¥–µ–Ω–æ: ${result.total} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n\n`;
        
        if (result.results.length === 0) {
          text += '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
        } else {
          result.results.forEach((match, index) => {
            text += `**${index + 1}. ${match.file}** (—Å—Ç—Ä–æ–∫–∞ ${match.line})\n`;
            text += `${match.content}\n\n`;
          });
        }
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      case 'memory_bank_archive': {
        const workingDir = getWorkingDirectory(request);
        const { memoryBankManager } = getProjectInstances(workingDir);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        const ensureResult = await memoryBankManager.ensureMemoryBankExists();
        if (!ensureResult.success) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ${ensureResult.message}`,
              },
            ],
          };
        }

        const { taskId, ...taskData } = args;
        const result = await memoryBankManager.archiveTask(taskId, taskData);
        
        let responseText = '';
        if (ensureResult.created) {
          responseText += `üÜï Memory Bank –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
        }
        
        responseText += result.success 
          ? `‚úÖ –ó–∞–¥–∞—á–∞ "${taskId}" –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`
          : `‚ùå ${result.message}`;
        
        return {
          content: [
            {
              type: 'text',
              text: responseText,
            },
          ],
        };
      }

      // File Watcher –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      case 'file_watcher_start': {
        const workingDir = getWorkingDirectory(request);
        const { fileWatcher } = getProjectInstances(workingDir);
        
        const result = await fileWatcher.startWatching();
        
        return {
          content: [
            {
              type: 'text',
              text: result.success 
                ? `‚úÖ ${result.message}\nüìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤: ${result.watchedFiles}\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`
                : `‚ùå ${result.message}`,
            },
          ],
        };
      }

      case 'file_watcher_stop': {
        const workingDir = getWorkingDirectory(request);
        const { fileWatcher } = getProjectInstances(workingDir);
        
        const result = fileWatcher.stopWatching();
        
        return {
          content: [
            {
              type: 'text',
              text: result.success 
                ? `‚úÖ ${result.message}\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`
                : `‚ùå ${result.message}`,
            },
          ],
        };
      }

      case 'file_watcher_stats': {
        const workingDir = getWorkingDirectory(request);
        const { fileWatcher } = getProjectInstances(workingDir);
        
        const stats = fileWatcher.getStats();
        
        let text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ File Watcher V2:\n\n';
        text += `üîç –°—Ç–∞—Ç—É—Å: ${stats.isWatching ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
        text += `üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤: ${stats.watchedFiles}\n`;
        text += `üéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}\n\n`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ V2
        if (stats.version === '2.0') {
          text += `üöÄ **File Watcher V2 - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n`;
          text += `üëÅÔ∏è –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${stats.realTimeWatchers || 0} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π\n`;
          text += `‚ö° –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${stats.bufferedChanges || 0}\n`;
          text += `üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${stats.features ? stats.features.join(', ') : 'real-time, content-analysis'}\n\n`;
        } else {
          text += `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${stats.pollInterval || 'N/A'}–º—Å\n`;
        }
        
        text += `üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${stats.ignoredPatterns}\n`;
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
      case 'set_project_path': {
        const { path } = args;
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          const fs = await import('fs/promises');
          const stats = await fs.stat(path);
          
          if (!stats.isDirectory()) {
            return {
              content: [
                {
                  type: 'text',
                  text: `‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: ${path}`,
                },
              ],
            };
          }
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
          setManualProjectPath(path);
          
          let text = `‚úÖ –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n`;
          text += `üéØ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: ${path}\n`;
          text += `üìã –¢–µ–ø–µ—Ä—å File Watcher –∏ Memory Bank –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º\n\n`;
          text += `üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n`;
          text += `1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å File Watcher –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω\n`;
          text += `2. –ó–∞–ø—É—Å—Ç–∏—Ç—å File Watcher –∑–∞–Ω–æ–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n`;
          text += `3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Memory Bank –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞`;
          
          return {
            content: [
              {
                type: 'text',
                text,
              },
            ],
          };
        } catch (error) {
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}\n\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.`,
              },
            ],
          };
        }
      }

      case 'get_current_project': {
        const workingDir = getWorkingDirectory(request);
        
        let text = 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ:\n\n';
        text += `üéØ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: ${workingDir}\n`;
        text += `üìç –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${manualProjectPath ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é' : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}\n\n`;
        
        text += 'üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n';
        if (projectInstances.size === 0) {
          text += '  ‚Ä¢ –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n';
        } else {
          for (const [path, instances] of projectInstances.entries()) {
            const lastUsedDate = new Date(instances.lastUsed).toLocaleString('ru-RU');
            const isActive = instances.fileWatcher.isWatching ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ö™ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            text += `  ‚Ä¢ ${path}\n`;
            text += `    File Watcher: ${isActive}\n`;
            text += `    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${lastUsedDate}\n\n`;
          }
        }
        
        text += 'üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n';
        text += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `set_project_path` –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞\n';
        text += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `file_watcher_stats` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n';
        text += '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `memory_bank_status` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Memory Bank';
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
    }
  } catch (error) {
    let errorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${name}: `;
    
    if (error.response) {
      errorMessage += `${error.response.status} - ${error.response.statusText}`;
      if (error.response.data && error.response.data.detail) {
        errorMessage += `\n${error.response.data.detail}`;
      }
    } else if (error.request) {
      errorMessage += 'RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000';
    } else {
      errorMessage += error.message;
    }
    
    return {
      content: [
        {
          type: 'text',
          text: errorMessage,
        },
      ],
      isError: true,
    };
  }
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      // RAG —Ä–µ—Å—É—Ä—Å—ã
      {
        uri: 'rag://frameworks',
        name: '–°–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö –≤ RAG –±–∞–∑–µ',
        mimeType: 'application/json',
      },
      {
        uri: 'rag://stats',
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG –±–∞–∑–µ',
        mimeType: 'application/json',
      },
      {
        uri: 'rag://models',
        name: '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –º–æ–¥–µ–ª—è—Ö',
        mimeType: 'application/json',
      },
      
      // Memory Bank —Ä–µ—Å—É—Ä—Å—ã
      {
        uri: 'memory://status',
        name: '–°—Ç–∞—Ç—É—Å Memory Bank',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Memory Bank',
        mimeType: 'application/json',
      },
      {
        uri: 'memory://tasks',
        name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏',
        description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ tasks.md',
        mimeType: 'text/markdown',
      },
      {
        uri: 'memory://progress',
        name: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞',
        description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ progress.md',
        mimeType: 'text/markdown',
      },
      {
        uri: 'memory://context',
        name: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ activeContext.md',
        mimeType: 'text/markdown',
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
  const { uri } = request.params;

  try {
    // RAG —Ä–µ—Å—É—Ä—Å—ã
    if (uri.startsWith('rag://')) {
      const endpoint = uri.replace('rag://', '');
      const response = await axios.get(`${RAG_SERVER_URL}/${endpoint}`);
      
      return {
        contents: [
          {
            uri,
            mimeType: 'application/json',
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    }
    
    // Memory Bank —Ä–µ—Å—É—Ä—Å—ã
    if (uri.startsWith('memory://')) {
      const resource = uri.replace('memory://', '');
      const workingDir = getWorkingDirectory(request);
      const { memoryBankManager } = getProjectInstances(workingDir);
      
      switch (resource) {
        case 'status': {
          await memoryBankManager.ensureMemoryBankExists();
          const status = await memoryBankManager.getMemoryBankStatus();
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –≤ —Å—Ç–∞—Ç—É—Å
          status.workingDirectory = workingDir;
          
          return {
            contents: [
              {
                uri,
                mimeType: 'application/json',
                text: JSON.stringify(status, null, 2),
              },
            ],
          };
        }
        
        case 'tasks': {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ä–µ—Å—É—Ä—Å—É
          await memoryBankManager.ensureMemoryBankExists();
          const result = await memoryBankManager.readMemoryBankFile('tasks.md');
          
          let content = result.success ? result.content : `–û—à–∏–±–∫–∞: ${result.message}`;
          content += `\n\n---\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`;
          
          return {
            contents: [
              {
                uri,
                mimeType: 'text/markdown',
                text: content,
              },
            ],
          };
        }
        
        case 'progress': {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ä–µ—Å—É—Ä—Å—É
          await memoryBankManager.ensureMemoryBankExists();
          const result = await memoryBankManager.readMemoryBankFile('progress.md');
          
          let content = result.success ? result.content : `–û—à–∏–±–∫–∞: ${result.message}`;
          content += `\n\n---\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`;
          
          return {
            contents: [
              {
                uri,
                mimeType: 'text/markdown',
                text: content,
              },
            ],
          };
        }
        
        case 'context': {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ä–µ—Å—É—Ä—Å—É
          await memoryBankManager.ensureMemoryBankExists();
          const result = await memoryBankManager.readMemoryBankFile('activeContext.md');
          
          let content = result.success ? result.content : `–û—à–∏–±–∫–∞: ${result.message}`;
          content += `\n\n---\nüéØ –ü—Ä–æ–µ–∫—Ç: ${workingDir}`;
          
          return {
            contents: [
              {
                uri,
                mimeType: 'text/markdown',
                text: content,
              },
            ],
          };
        }
        
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å Memory Bank: ${resource}`);
      }
    }

    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å: ${uri}`);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞ ${uri}: ${error.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π File Watcher —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
// –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getProjectInstances()

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  
  console.error('üöÄ Enhanced RAG + Memory Bank MCP server started');
  console.error('üìö RAG functions: ask_rag, list_frameworks, get_rag_stats, list_models');
  console.error('üß† Memory Bank functions: memory_bank_*, file_watcher_*');
}

main().catch((error) => {
  console.error('Server startup error:', error);
  process.exit(1);
});
