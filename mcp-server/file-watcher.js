import fs from 'fs/promises';
import path from 'path';
import { EventEmitter } from 'events';

export class FileWatcher extends EventEmitter {
  constructor(projectRoot = process.env.WORKSPACE_FOLDER || process.cwd(), memoryBankManager) {
    super();
    this.projectRoot = projectRoot;
    this.memoryBankManager = memoryBankManager;
    this.watchedFiles = new Map();
    this.isWatching = false;
    this.watchInterval = null;
    this.pollInterval = 2000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    console.error(`üèóÔ∏è FileWatcher constructor called with ${this.watchedFiles.size} files`);
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.forceReset();
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
    this.ignoredPatterns = [
      /node_modules/,
      /\.git/,
      /\.vscode/,
      /\.idea/,
      /dist/,
      /build/,
      /coverage/,
      /\.DS_Store/,
      /\.env/,
      /\.log$/,
      /\.tmp$/,
      /chroma_storage/,
      /embedding_cache/,
      /__pycache__/,
      /\.pyc$/
    ];
  }

  // –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  async startWatching() {
    if (this.isWatching) {
      return { success: false, message: 'File Watcher —É–∂–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    try {
      console.log('üîç Starting File Watcher...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      await this.scanProject();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      this.watchInterval = setInterval(() => {
        this.checkForChanges();
      }, this.pollInterval);
      
      this.isWatching = true;
      
      console.log('‚úÖ File Watcher started');
      return { 
        success: true, 
        message: 'File Watcher started successfully',
        watchedFiles: this.watchedFiles.size
      };
    } catch (error) {
      console.error('‚ùå File Watcher startup error:', error);
      return { 
        success: false, 
        message: `Startup error: ${error.message}` 
      };
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  stopWatching() {
    if (!this.isWatching) {
      return { success: false, message: 'File Watcher –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    if (this.watchInterval) {
      clearInterval(this.watchInterval);
      this.watchInterval = null;
    }

    this.isWatching = false;
    this.watchedFiles.clear(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log('üõë File Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    return { 
      success: true, 
      message: 'File Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
    };
  }

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  async scanProject() {
    const scanDirectory = async (dirPath, relativePath = '') => {
      try {
        const files = await fs.readdir(dirPath);
        
        for (const file of files) {
          const fullPath = path.join(dirPath, file);
          const relativeFilePath = path.join(relativePath, file);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          if (this.shouldIgnore(relativeFilePath)) {
            continue;
          }

          const stats = await fs.stat(fullPath);
          
          if (stats.isDirectory()) {
            await scanDirectory(fullPath, relativeFilePath);
          } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            this.watchedFiles.set(fullPath, {
              path: relativeFilePath,
              size: stats.size,
              mtime: stats.mtime.getTime(),
              exists: true
            });
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dirPath}:`, error.message);
      }
    };

    await scanDirectory(this.projectRoot);
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω: ${this.watchedFiles.size} —Ñ–∞–π–ª–æ–≤`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  async checkForChanges() {
    try {
      const changes = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
      for (const [fullPath, fileInfo] of this.watchedFiles.entries()) {
        try {
          const stats = await fs.stat(fullPath);
          const currentMtime = stats.mtime.getTime();
          const currentSize = stats.size;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if (currentMtime !== fileInfo.mtime || currentSize !== fileInfo.size) {
            const changeType = this.detectChangeType(fileInfo, { size: currentSize, mtime: currentMtime });
            
            changes.push({
              type: 'modified',
              path: fileInfo.path,
              fullPath,
              changeType,
              oldSize: fileInfo.size,
              newSize: currentSize,
              timestamp: new Date().toISOString()
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            this.watchedFiles.set(fullPath, {
              ...fileInfo,
              size: currentSize,
              mtime: currentMtime
            });
          }
        } catch (error) {
          if (error.code === 'ENOENT') {
            // –§–∞–π–ª —É–¥–∞–ª–µ–Ω
            changes.push({
              type: 'deleted',
              path: fileInfo.path,
              fullPath,
              timestamp: new Date().toISOString()
            });
            
            this.watchedFiles.delete(fullPath);
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      await this.checkForNewFiles(changes);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (changes.length > 0) {
        await this.processChanges(changes);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  async checkForNewFiles(changes) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    try {
      const files = await fs.readdir(this.projectRoot);
      
      for (const file of files) {
        const fullPath = path.join(this.projectRoot, file);
        
        if (this.shouldIgnore(file)) {
          continue;
        }
        
        if (!this.watchedFiles.has(fullPath)) {
          try {
            const stats = await fs.stat(fullPath);
            
            if (stats.isFile()) {
              changes.push({
                type: 'created',
                path: file,
                fullPath,
                size: stats.size,
                timestamp: new Date().toISOString()
              });
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
              this.watchedFiles.set(fullPath, {
                path: file,
                size: stats.size,
                mtime: stats.mtime.getTime(),
                exists: true
              });
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  detectChangeType(oldInfo, newInfo) {
    if (newInfo.size > oldInfo.size) {
      return 'content_added';
    } else if (newInfo.size < oldInfo.size) {
      return 'content_removed';
    } else {
      return 'content_modified';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  async processChanges(changes) {
    console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${changes.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    
    for (const change of changes) {
      console.log(`  ${change.type}: ${change.path}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      this.emit('fileChange', change);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
      const keyMoments = await this.detectKeyMoments(change);
      
      if (keyMoments.length > 0) {
        console.log(`  üîë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${keyMoments.length} –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤`);
        
        for (const moment of keyMoments) {
          this.emit('keyMoment', moment);
          await this.saveKeyMomentToMemoryBank(moment, change);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º Memory Bank
      await this.updateMemoryBankProgress(change);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  async detectKeyMoments(change) {
    const moments = [];
    
    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const fileExt = path.extname(change.path).toLowerCase();
      const fileName = path.basename(change.path);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      if (change.type === 'created') {
        moments.push({
          type: 'FILE_CREATED',
          title: `–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${fileName}`,
          description: `–ù–æ–≤—ã–π —Ñ–∞–π–ª: ${change.path}`,
          file: change.path,
          timestamp: change.timestamp
        });
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (change.type === 'deleted') {
        moments.push({
          type: 'FILE_DELETED',
          title: `–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª ${fileName}`,
          description: `–§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${change.path}`,
          file: change.path,
          timestamp: change.timestamp
        });
      }
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
      if (this.isConfigFile(fileName)) {
        moments.push({
          type: 'CONFIG_CHANGED',
          title: `–ò–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${fileName}`,
          description: `–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${change.path}`,
          file: change.path,
          timestamp: change.timestamp
        });
      }
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
      if (this.isCodeFile(fileExt)) {
        if (change.changeType === 'content_added') {
          moments.push({
            type: 'CODE_ADDED',
            title: `–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ –≤ ${fileName}`,
            description: `–†–∞—Å—à–∏—Ä–µ–Ω —Ñ–∞–π–ª: ${change.path} (+${change.newSize - change.oldSize} –±–∞–π—Ç)`,
            file: change.path,
            timestamp: change.timestamp
          });
        }
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:', error);
    }
    
    return moments;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤ Memory Bank
  async saveKeyMomentToMemoryBank(moment, change) {
    try {
      if (!this.memoryBankManager) {
        return;
      }

      // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π progress.md
      const progressResult = await this.memoryBankManager.readMemoryBankFile('progress.md');
      
      if (progressResult.success) {
        const timestamp = new Date().toLocaleString('ru-RU');
        const newEntry = `\n## ${moment.title}\n**–í—Ä–µ–º—è:** ${timestamp}\n**–û–ø–∏—Å–∞–Ω–∏–µ:** ${moment.description}\n**–§–∞–π–ª:** ${change.path}\n`;
        
        const updatedContent = progressResult.content + newEntry;
        
        await this.memoryBankManager.writeMemoryBankFile('progress.md', updatedContent);
        console.log(`üíæ –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Memory Bank: ${moment.title}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Memory Bank:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Memory Bank
  async updateMemoryBankProgress(change) {
    try {
      if (!this.memoryBankManager) {
        return;
      }

      // –ß–∏—Ç–∞–µ–º activeContext.md
      const contextResult = await this.memoryBankManager.readMemoryBankFile('activeContext.md');
      
      if (contextResult.success) {
        const timestamp = new Date().toLocaleString('ru-RU');
        const changeInfo = `\n**${timestamp}:** ${change.type} - ${change.path}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Å–µ–∫—Ü–∏—é "Working On"
        let updatedContent = contextResult.content;
        
        if (updatedContent.includes('## Working On')) {
          updatedContent = updatedContent.replace(
            '## Working On',
            `## Working On${changeInfo}`
          );
        } else {
          updatedContent += `\n## Recent Changes${changeInfo}`;
        }
        
        await this.memoryBankManager.writeMemoryBankFile('activeContext.md', updatedContent);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
  shouldIgnore(filePath) {
    return this.ignoredPatterns.some(pattern => pattern.test(filePath));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  isConfigFile(fileName) {
    const configFiles = [
      'package.json', 'package-lock.json', 'yarn.lock',
      'composer.json', 'composer.lock',
      'requirements.txt', 'Pipfile', 'poetry.lock',
      'config.yaml', 'config.yml', 'config.json',
      '.env', '.env.example',
      'webpack.config.js', 'vite.config.js',
      'tsconfig.json', 'jsconfig.json',
      'tailwind.config.js', 'postcss.config.js'
    ];
    
    return configFiles.includes(fileName.toLowerCase());
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–¥–∞
  isCodeFile(extension) {
    const codeExtensions = [
      '.js', '.ts', '.jsx', '.tsx',
      '.py', '.php', '.java', '.c', '.cpp',
      '.html', '.css', '.scss', '.sass',
      '.vue', '.svelte', '.md', '.mdx'
    ];
    
    return codeExtensions.includes(extension);
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  forceReset() {
    console.error(`üîß FileWatcher.forceReset() called - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
    
    if (this.watchInterval) {
      clearInterval(this.watchInterval);
      this.watchInterval = null;
    }
    
    this.isWatching = false;
    this.watchedFiles.clear();
    
    console.error(`‚úÖ FileWatcher forceReset complete - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ`);
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  reset() {
    console.error(`üîÑ FileWatcher.reset() called - clearing all state`);
    
    if (this.watchInterval) {
      clearInterval(this.watchInterval);
      this.watchInterval = null;
    }
    
    this.isWatching = false;
    this.watchedFiles.clear();
    
    console.error(`‚úÖ FileWatcher reset complete - watchedFiles.size: ${this.watchedFiles.size}`);
    
    return {
      success: true,
      message: 'FileWatcher state reset successfully'
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    console.error(`üîç FileWatcher.getStats() called:`);
    console.error(`  - isWatching: ${this.isWatching}`);
    console.error(`  - watchedFiles.size: ${this.watchedFiles.size}`);
    console.error(`  - watchInterval: ${this.watchInterval}`);
    console.error(`  - Map contents:`, Array.from(this.watchedFiles.keys()).slice(0, 3));
    
    // –ï—Å–ª–∏ File Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ñ–∞–π–ª—ã –≤—Å–µ –µ—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
    if (!this.isWatching && this.watchedFiles.size > 0) {
      console.error(`‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: File Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ watchedFiles —Å–æ–¥–µ—Ä–∂–∏—Ç ${this.watchedFiles.size} —Ñ–∞–π–ª–æ–≤!`);
      console.error(`üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...`);
      this.watchedFiles.clear();
      console.error(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - watchedFiles.size: ${this.watchedFiles.size}`);
    }
    
    return {
      isWatching: this.isWatching,
      watchedFiles: this.watchedFiles.size,
      pollInterval: this.pollInterval,
      ignoredPatterns: this.ignoredPatterns.length
    };
  }
}
