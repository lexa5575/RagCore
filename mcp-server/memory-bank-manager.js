import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export class MemoryBankManager {
  constructor(projectRoot = process.env.WORKSPACE_FOLDER || process.cwd()) {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å ${workspaceFolder} - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    if (projectRoot && projectRoot.includes('${workspaceFolder}')) {
      projectRoot = process.cwd();
    }
    this.projectRoot = projectRoot;
    this.memoryBankPath = path.join(projectRoot, 'memory-bank');
  }

  // –£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Memory Bank
  async ensureMemoryBankExists() {
    try {
      const hasBank = await this.hasMemoryBank();
      
      if (!hasBank) {
        console.log(`üß† Auto-initializing Memory Bank for project: ${this.projectRoot}`);
        const result = await this.initializeMemoryBank();
        
        if (result.success) {
          console.log(`‚úÖ Memory Bank auto-created at: ${result.path}`);
          return {
            success: true,
            created: true,
            message: `Memory Bank auto-initialized for project`,
            path: result.path
          };
        } else {
          console.error(`‚ùå Failed to auto-initialize Memory Bank: ${result.message}`);
          return {
            success: false,
            created: false,
            message: result.message
          };
        }
      } else {
        // Memory Bank —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        return {
          success: true,
          created: false,
          message: 'Using existing Memory Bank',
          path: this.memoryBankPath
        };
      }
    } catch (error) {
      console.error(`‚ùå Error in ensureMemoryBankExists: ${error.message}`);
      return {
        success: false,
        created: false,
        message: `Auto-initialization failed: ${error.message}`
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Memory Bank
  async hasMemoryBank() {
    try {
      const stats = await fs.stat(this.memoryBankPath);
      return stats.isDirectory();
    } catch (error) {
      return false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Memory Bank —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  async initializeMemoryBank() {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
      await fs.mkdir(this.memoryBankPath, { recursive: true });
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      await fs.mkdir(path.join(this.memoryBankPath, 'creative'), { recursive: true });
      await fs.mkdir(path.join(this.memoryBankPath, 'reflection'), { recursive: true });
      await fs.mkdir(path.join(this.memoryBankPath, 'archive'), { recursive: true });

      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      const files = {
        'projectbrief.md': this.getProjectBriefTemplate(),
        'tasks.md': this.getTasksTemplate(),
        'activeContext.md': this.getActiveContextTemplate(),
        'progress.md': this.getProgressTemplate(),
        'productContext.md': this.getProductContextTemplate(),
        'systemPatterns.md': this.getSystemPatternsTemplate(),
        'techContext.md': this.getTechContextTemplate(),
        'style-guide.md': this.getStyleGuideTemplate()
      };

      for (const [filename, content] of Object.entries(files)) {
        const filePath = path.join(this.memoryBankPath, filename);
        await fs.writeFile(filePath, content, 'utf8');
      }

      return {
        success: true,
        message: 'Memory Bank –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        path: this.memoryBankPath
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Memory Bank: ${error.message}`,
        error: error.message
      };
    }
  }

  // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Memory Bank
  async readMemoryBankFile(filename) {
    try {
      const filePath = path.join(this.memoryBankPath, filename);
      const content = await fs.readFile(filePath, 'utf8');
      return {
        success: true,
        content,
        filename,
        path: filePath
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename}: ${error.message}`,
        error: error.message
      };
    }
  }

  // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª Memory Bank
  async writeMemoryBankFile(filename, content) {
    try {
      const filePath = path.join(this.memoryBankPath, filename);
      await fs.writeFile(filePath, content, 'utf8');
      return {
        success: true,
        message: `–§–∞–π–ª ${filename} –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
        filename,
        path: filePath
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${filename}: ${error.message}`,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Memory Bank
  async getMemoryBankStatus() {
    try {
      const hasBank = await this.hasMemoryBank();
      if (!hasBank) {
        return {
          exists: false,
          message: 'Memory Bank –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        };
      }

      const files = await fs.readdir(this.memoryBankPath);
      const status = {
        exists: true,
        path: this.memoryBankPath,
        files: [],
        directories: []
      };

      for (const file of files) {
        const filePath = path.join(this.memoryBankPath, file);
        const stats = await fs.stat(filePath);
        
        if (stats.isDirectory()) {
          const subFiles = await fs.readdir(filePath);
          status.directories.push({
            name: file,
            files: subFiles.length
          });
        } else {
          const content = await fs.readFile(filePath, 'utf8');
          status.files.push({
            name: file,
            size: stats.size,
            modified: stats.mtime,
            lines: content.split('\n').length
          });
        }
      }

      return status;
    } catch (error) {
      return {
        exists: false,
        error: error.message
      };
    }
  }

  // –ü–æ–∏—Å–∫ –≤ Memory Bank
  async searchMemoryBank(query) {
    try {
      const hasBank = await this.hasMemoryBank();
      if (!hasBank) {
        return {
          success: false,
          message: 'Memory Bank –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        };
      }

      const results = [];
      const searchInDirectory = async (dirPath, relativePath = '') => {
        const files = await fs.readdir(dirPath);
        
        for (const file of files) {
          const filePath = path.join(dirPath, file);
          const stats = await fs.stat(filePath);
          
          if (stats.isDirectory()) {
            await searchInDirectory(filePath, path.join(relativePath, file));
          } else if (file.endsWith('.md')) {
            const content = await fs.readFile(filePath, 'utf8');
            const lines = content.split('\n');
            
            lines.forEach((line, index) => {
              if (line.toLowerCase().includes(query.toLowerCase())) {
                results.push({
                  file: path.join(relativePath, file),
                  line: index + 1,
                  content: line.trim(),
                  context: lines.slice(Math.max(0, index - 1), index + 2)
                });
              }
            });
          }
        }
      };

      await searchInDirectory(this.memoryBankPath);

      return {
        success: true,
        query,
        results,
        total: results.length
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`,
        error: error.message
      };
    }
  }

  // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  async archiveTask(taskId, taskData) {
    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ Memory Bank —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureMemoryBankExists();
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ archive —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const archiveDir = path.join(this.memoryBankPath, 'archive');
      await fs.mkdir(archiveDir, { recursive: true });
      
      const timestamp = new Date().toISOString().split('T')[0];
      const archiveFilename = `archive-${taskId}-${timestamp}.md`;
      const archiveContent = this.getArchiveTemplate(taskId, taskData);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–∞–ø–∫—É archive
      const archiveFilePath = path.join(archiveDir, archiveFilename);
      await fs.writeFile(archiveFilePath, archiveContent, 'utf8');
      
      // –û—á–∏—â–∞–µ–º tasks.md –ø–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.writeMemoryBankFile('tasks.md', this.getTasksTemplate());
      
      return {
        success: true,
        message: `–ó–∞–¥–∞—á–∞ "${taskId}" –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
        filename: archiveFilename,
        path: archiveFilePath
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
        error: error.message
      };
    }
  }

  // –®–∞–±–ª–æ–Ω—ã —Ñ–∞–π–ª–æ–≤
  getProjectBriefTemplate() {
    return `# Project Brief

## Project Overview
[–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞]

## Goals and Objectives
- [–¶–µ–ª—å 1]
- [–¶–µ–ª—å 2]

## Key Stakeholders
- [–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1]
- [–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2]

## Success Criteria
- [–ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞ 1]
- [–ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞ 2]

## Timeline
- Start Date: [–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞]
- Target Completion: [–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è]

---
*–°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getTasksTemplate() {
    return `# Active Tasks

## Current Task
[–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏]

## Task Checklist
- [ ] [–ü–æ–¥–∑–∞–¥–∞—á–∞ 1]
- [ ] [–ü–æ–¥–∑–∞–¥–∞—á–∞ 2]
- [ ] [–ü–æ–¥–∑–∞–¥–∞—á–∞ 3]

## Components
- [–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1]
- [–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2]

## Notes
[–ó–∞–º–µ—Ç–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã]

---
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getActiveContextTemplate() {
    return `# Active Context

## Current Focus
[–¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏]

## Working On
- [–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å–µ–π—á–∞—Å]

## Next Steps
1. [–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ 1]
2. [–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ 2]

## Blockers
- [–ë–ª–æ–∫–µ—Ä 1]
- [–ë–ª–æ–∫–µ—Ä 2]

---
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getProgressTemplate() {
    return `# Progress Tracking

## Completed
- [x] [–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 1]
- [x] [–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 2]

## In Progress
- [ ] [–ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ 1]
- [ ] [–ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ 2]

## Planned
- [ ] [–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 1]
- [ ] [–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ 2]

## Metrics
- Progress: [X]%
- Time Spent: [X] hours
- Estimated Remaining: [X] hours

---
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getProductContextTemplate() {
    return `# Product Context

## Product Vision
[–í–∏–¥–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞]

## Target Users
- [–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è 1]
- [–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è 2]

## Key Features
- [–ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è 1]
- [–ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è 2]

## Business Requirements
- [–ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1]
- [–ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2]

---
*–°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getSystemPatternsTemplate() {
    return `# System Patterns

## Architecture Patterns
- [–ü–∞—Ç—Ç–µ—Ä–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã 1]
- [–ü–∞—Ç—Ç–µ—Ä–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã 2]

## Design Patterns
- [–ü–∞—Ç—Ç–µ—Ä–Ω –¥–∏–∑–∞–π–Ω–∞ 1]
- [–ü–∞—Ç—Ç–µ—Ä–Ω –¥–∏–∑–∞–π–Ω–∞ 2]

## Coding Standards
- [–°—Ç–∞–Ω–¥–∞—Ä—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è 1]
- [–°—Ç–∞–Ω–¥–∞—Ä—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è 2]

## Best Practices
- [–õ—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ 1]
- [–õ—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ 2]

---
*–°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getTechContextTemplate() {
    return `# Technical Context

## Technology Stack
- Frontend: [–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞]
- Backend: [–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –±—ç–∫–µ–Ω–¥–∞]
- Database: [–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö]
- Infrastructure: [–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞]

## Dependencies
- [–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å 1]
- [–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å 2]

## Development Environment
- [–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å—Ä–µ–¥–µ 1]
- [–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å—Ä–µ–¥–µ 2]

## Deployment
- [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏]

---
*–°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getStyleGuideTemplate() {
    return `# Style Guide

## Code Style
- [–ü—Ä–∞–≤–∏–ª–æ —Å—Ç–∏–ª—è –∫–æ–¥–∞ 1]
- [–ü—Ä–∞–≤–∏–ª–æ —Å—Ç–∏–ª—è –∫–æ–¥–∞ 2]

## Naming Conventions
- [–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ 1]
- [–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ 2]

## Documentation Standards
- [–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 1]
- [–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 2]

## Review Guidelines
- [–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–µ–≤—å—é 1]
- [–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–µ–≤—å—é 2]

---
*–°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}*
`;
  }

  getArchiveTemplate(taskId, taskData) {
    return `# Archive: ${taskId}

## Task Summary
${taskData.summary || '[–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]'}

## Completed Work
${taskData.completedWork || '[–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã]'}

## Key Decisions
${taskData.keyDecisions || '[–ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è]'}

## Lessons Learned
${taskData.lessonsLearned || '[–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏]'}

## Files Modified
${taskData.filesModified || '[–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã]'}

## Time Spent
${taskData.timeSpent || '[–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è]'}

---
*–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}*
`;
  }
}
