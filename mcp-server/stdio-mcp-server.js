#!/usr/bin/env node

/**
 * ü§ñ STDIO MCP Server –¥–ª—è Claude Code CLI
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
 * –í—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É RAG —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 8000
 */

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';
import yaml from 'js-yaml';

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const configPath = path.join(path.dirname(new URL(import.meta.url).pathname), '..', 'config.yaml');
const configContent = await fs.readFile(configPath, 'utf8');
const config = yaml.load(configContent);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
function getCurrentProjectName() {
  const cwd = process.cwd();
  const projectName = path.basename(cwd);
  return projectName.replace(/[^\w\-_.]/g, '_') || 'default';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
function getCurrentProjectRoot() {
  return process.cwd();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
async function getOrCreateSession() {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    const sessionResponse = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
    return sessionResponse.data.session_id;
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    try {
      const createResponse = await axios.post(`${RAG_SERVER_URL}/sessions/create`, {
        project_name: getCurrentProjectName()
      });
      return createResponse.data.session_id;
    } catch (createError) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: ${createError.message}`);
    }
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RAG_SERVER_URL = process.env.RAG_SERVER_URL || 'http://localhost:8000';
const CHUNK_LIMIT_TOKENS = config.mcp?.chunk_limit_tokens || 4000;
const KEY_MOMENTS_LIMIT = config.mcp?.key_moments_limit || 10;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const server = new Server(
  {
    name: "rag-server",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ RAG (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –∏–∑ HTTP —Å–µ—Ä–≤–µ—Ä–∞)
function cleanRAGResponse(response) {
  if (!response || typeof response !== 'string') {
    return response;
  }
  
  // –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
  let cleanedResponse = response;
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–∞
  const answerMarkers = [
    '[Answer]',
    '[–û—Ç–≤–µ—Ç]',
    'Answer:',
    '–û—Ç–≤–µ—Ç:',
    '[Response]',
    'Response:'
  ];
  
  for (const marker of answerMarkers) {
    while (cleanedResponse.includes(marker)) {
      cleanedResponse = cleanedResponse.replace(marker, '');
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä –æ—Ç–≤–µ—Ç–∞, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
  const firstAnswerIndex = response.indexOf('[Answer]');
  if (firstAnswerIndex !== -1) {
    const secondAnswerIndex = response.indexOf('[Answer]', firstAnswerIndex + 1);
    if (secondAnswerIndex !== -1) {
      cleanedResponse = response.substring(firstAnswerIndex + '[Answer]'.length, secondAnswerIndex).trim();
    } else {
      cleanedResponse = response.substring(firstAnswerIndex + '[Answer]'.length).trim();
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const contextMarkers = [
    /\[.*?Documentation Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[User Question\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[Additional Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[Instructions\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[.*?Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi
  ];
  
  for (const pattern of contextMarkers) {
    cleanedResponse = cleanedResponse.replace(pattern, '');
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
  cleanedResponse = cleanedResponse.replace(/```+\s*$/g, '').trim();
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏–ø–∞ "Human:", "Assistant:", "User:"
  cleanedResponse = cleanedResponse.replace(/^(Human|Assistant|User|AI):\s*/gm, '');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
  cleanedResponse = cleanedResponse.replace(/\n{3,}/g, '\n\n');
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  cleanedResponse = cleanedResponse.trim();
  
  if (!cleanedResponse) {
    cleanedResponse = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.";
  }
  
  return cleanedResponse;
}

// ü§ñ –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ session_manager.py)
const KEY_MOMENT_TYPES = {
  ERROR_SOLVED: "error_solved",
  FEATURE_COMPLETED: "feature_completed", 
  CONFIG_CHANGED: "config_changed",
  BREAKTHROUGH: "breakthrough",
  FILE_CREATED: "file_created",
  DEPLOYMENT: "deployment",
  IMPORTANT_DECISION: "important_decision",
  REFACTORING: "refactoring",
  TEST_ADDED: "test_added"
};

const MOMENT_IMPORTANCE = {
  [KEY_MOMENT_TYPES.BREAKTHROUGH]: 9,
  [KEY_MOMENT_TYPES.ERROR_SOLVED]: 8,
  [KEY_MOMENT_TYPES.DEPLOYMENT]: 8,
  [KEY_MOMENT_TYPES.FEATURE_COMPLETED]: 7,
  [KEY_MOMENT_TYPES.IMPORTANT_DECISION]: 7,
  [KEY_MOMENT_TYPES.CONFIG_CHANGED]: 6,
  [KEY_MOMENT_TYPES.REFACTORING]: 6,
  [KEY_MOMENT_TYPES.TEST_ADDED]: 6,
  [KEY_MOMENT_TYPES.FILE_CREATED]: 5,
};

function autoDetectKeyMoments(toolName, args, content = "", files = []) {
  const moments = [];
  const contentLower = content.toLowerCase();
  const toolNameLower = toolName.toLowerCase();
  
  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const fileTypes = files.map(file => {
    const ext = file.split('.').pop()?.toLowerCase();
    if (['js', 'ts', 'jsx', 'tsx'].includes(ext)) return 'javascript';
    if (['py'].includes(ext)) return 'python';
    if (['yaml', 'yml'].includes(ext)) return 'config';
    if (['json'].includes(ext)) return 'config';
    if (['md'].includes(ext)) return 'documentation';
    if (['test.js', 'spec.js', 'test.ts', 'spec.ts'].some(t => file.includes(t))) return 'test';
    return ext || 'unknown';
  });
  
  // –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const contentSize = content.length;
  const isLargeChange = contentSize > 1000;
  const isMediumChange = contentSize > 300;
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–æ–∫ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const errorKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "error", "fix", "fixed", "solved", "resolved", "bug", "issue", "problem", 
    "debug", "debugged", "patch", "patched", "hotfix", "bugfix", "correction",
    "trouble", "troubleshoot", "repair", "repaired", "broken", "crash", "failed",
    // –†—É—Å—Å–∫–∏–µ
    "–æ—à–∏–±–∫–∞", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω", "—Ä–µ—à–µ–Ω", "—Ä–µ—à–µ–Ω–∞", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞", "–ø–æ—á–∏–Ω–µ–Ω", "–ø–æ—á–∏–Ω–µ–Ω–∞",
    "–±–∞–≥", "–ø—Ä–æ–±–ª–µ–º–∞", "—É—Å—Ç—Ä–∞–Ω–µ–Ω", "—É—Å—Ç—Ä–∞–Ω–µ–Ω–∞", "—Ñ–∏–∫—Å", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–æ—Ç–ª–∞–¥–∫–∞",
    "–æ—Ç–ª–∞–∂–µ–Ω", "–ø–∞—Ç—á", "—Ö–æ—Ç—Ñ–∏–∫—Å", "–±–∞–≥—Ñ–∏–∫—Å", "–∫–æ—Ä—Ä–µ–∫—Ü–∏—è", "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
    "—Å–ª–æ–º–∞–Ω", "—Å–ª–æ–º–∞–Ω–∞", "–ø–∞–¥–µ–Ω–∏–µ", "–∫—Ä–∞—Ö", "–ø—Ä–æ–≤–∞–ª", "—Å–±–æ–π"
  ];
  
  if (errorKeywords.some(word => contentLower.includes(word))) {
    const fileContext = fileTypes.length > 0 ? ` –≤ ${fileTypes.join(', ')} —Ñ–∞–π–ª–∞—Ö` : '';
    const scaleContext = isLargeChange ? ' (–∫—Ä—É–ø–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)' : isMediumChange ? ' (—Å—Ä–µ–¥–Ω–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)' : '';
    
    moments.push({
      type: KEY_MOMENT_TYPES.ERROR_SOLVED,
      title: `–†–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏${fileContext}${scaleContext}`,
      summary: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ ${toolName}${fileContext}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.ERROR_SOLVED] + (isLargeChange ? 1 : 0),
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  const creationActions = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "create", "created", "write", "wrote", "written", "add", "added", "new file", 
    "generate", "generated", "build", "built", "make", "made", "initialize", "init",
    // –†—É—Å—Å–∫–∏–µ  
    "—Å–æ–∑–¥–∞—Ç—å", "—Å–æ–∑–¥–∞–Ω", "—Å–æ–∑–¥–∞–Ω–∞", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞–ª", "–Ω–∞–ø–∏—Å–∞–Ω–∞", "–¥–æ–±–∞–≤–∏—Ç—å",
    "–¥–æ–±–∞–≤–ª–µ–Ω", "–¥–æ–±–∞–≤–ª–µ–Ω–∞", "–Ω–æ–≤—ã–π —Ñ–∞–π–ª", "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "–ø–æ—Å—Ç—Ä–æ–∏—Ç—å",
    "–ø–æ—Å—Ç—Ä–æ–µ–Ω", "—Å–¥–µ–ª–∞—Ç—å", "—Å–¥–µ–ª–∞–Ω", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
  ];
  if ((creationActions.some(action => toolNameLower.includes(action) || contentLower.includes(action)) && files.length > 0) ||
      (toolName === "open_file" && args.path && contentLower.includes("—Å–æ–∑–¥–∞–Ω"))) {
    const fileName = files[0] || args.path || "";
    const fileType = fileTypes[0] || fileName.split('.').pop() || '—Ñ–∞–π–ª';
    const scaleContext = isLargeChange ? ' (–∫—Ä—É–ø–Ω—ã–π —Ñ–∞–π–ª)' : '';
    
    moments.push({
      type: KEY_MOMENT_TYPES.FILE_CREATED,
      title: `–°–æ–∑–¥–∞–Ω–∏–µ ${fileType} —Ñ–∞–π–ª–∞${scaleContext}`,
      summary: `–°–æ–∑–¥–∞–Ω ${fileType} —Ñ–∞–π–ª ${fileName} —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.FILE_CREATED] + (fileType === 'test' ? 1 : 0),
      files: files.length > 0 ? files : (args.path ? [args.path] : [])
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const completionKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "completed", "finished", "done", "implemented", "ready", "success", "successful",
    "accomplish", "accomplished", "achieve", "achieved", "feature", "functionality",
    "working", "works", "functional", "delivered", "deploy", "deployed",
    // –†—É—Å—Å–∫–∏–µ
    "–∑–∞–≤–µ—Ä—à–µ–Ω", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–∞", "–≤—ã–ø–æ–ª–Ω–µ–Ω", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
    "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", "–∑–∞–∫–æ–Ω—á–µ–Ω", "–∑–∞–∫–æ–Ω—á–µ–Ω–∞", "—Å–¥–µ–ª–∞–Ω", "—Å–¥–µ–ª–∞–Ω–∞",
    "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç", "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞", "—Ñ—É–Ω–∫—Ü–∏—è", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "—Ä–∞–±–æ—Ç–∞–µ—Ç",
    "—Ä–∞–±–æ—á–∏–π", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞"
  ];
  
  if (completionKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.FEATURE_COMPLETED,
      title: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
      summary: `–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.FEATURE_COMPLETED],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const configKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "config", "configuration", "settings", "yaml", "json", "env", "environment",
    "setup", "options", "preferences", "properties", "variables", "constants",
    "parameters", "configure", "configured", "setup", "initialized",
    // –†—É—Å—Å–∫–∏–µ
    "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–∫–æ–Ω—Ñ–∏–≥", "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
    "–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã", "–æ–ø—Ü–∏–∏", "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", "—Å–≤–æ–π—Å—Ç–≤–∞", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
    "—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω", "—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
  ];
  
  if ((configKeywords.some(word => contentLower.includes(word)) && files.length > 0) ||
      (files.some(file => file.includes('.yaml') || file.includes('.json') || file.includes('.config')))) {
    moments.push({
      type: KEY_MOMENT_TYPES.CONFIG_CHANGED,
      title: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
      summary: `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.CONFIG_CHANGED],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const refactoringKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "refactor", "refactored", "refactoring", "restructure", "restructured", 
    "optimize", "optimized", "optimization", "improve", "improved", "improvement",
    "enhance", "enhanced", "enhancement", "redesign", "redesigned", "rewrite", "rewritten",
    "cleanup", "clean", "simplified", "streamline", "streamlined", "modernize", "modernized",
    // –†—É—Å—Å–∫–∏–µ
    "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–ª", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–ª–∞", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
    "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω", "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞", "—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è", "—É–ª—É—á—à–µ–Ω", "—É–ª—É—á—à–µ–Ω–∞", "—É–ª—É—á—à–µ–Ω–∏–µ",
    "—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω", "—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∞", "–ø–µ—Ä–µ–ø–∏—Å–∞–Ω", "–ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞", "–æ—á–∏—Å—Ç–∫–∞", "–æ—á–∏—â–µ–Ω",
    "—É–ø—Ä–æ—â–µ–Ω", "—É–ø—Ä–æ—â–µ–Ω–∞", "–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω", "–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "–æ–±–Ω–æ–≤–ª–µ–Ω", "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
  ];
  
  if (refactoringKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.REFACTORING,
      title: "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞",
      summary: `–ü—Ä–æ–≤–µ–¥–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.REFACTORING],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const decisionKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "decided", "decision", "choice", "selected", "approach",
    // –†—É—Å—Å–∫–∏–µ
    "—Ä–µ—à–∏–ª", "—Ä–µ—à–∏–ª–∞", "—Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–ø–æ–¥—Ö–æ–¥", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "–ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±—Ä–∞–Ω", "–≤—ã–±—Ä–∞–Ω–∞"
  ];
  
  if (decisionKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.IMPORTANT_DECISION,
      title: "–í–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
      summary: `–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.IMPORTANT_DECISION],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const testKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "test", "tests", "testing", "spec", "specs", "unit test", "integration test",
    "test case", "test suite", "assert", "assertion", "mock", "mocked", "stub",
    "coverage", "jest", "mocha", "cypress", "playwright", "vitest", "karma",
    // –†—É—Å—Å–∫–∏–µ
    "—Ç–µ—Å—Ç", "—Ç–µ—Å—Ç—ã", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å–ø–µ–∫", "—Å–ø–µ–∫–∏", "—é–Ω–∏—Ç —Ç–µ—Å—Ç", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç",
    "—Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π", "–Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤", "—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–º–æ–∫", "–∑–∞–≥–ª—É—à–∫–∞", "–ø–æ–∫—Ä—ã—Ç–∏–µ"
  ];
  
  if ((testKeywords.some(word => contentLower.includes(word)) && files.length > 0) ||
      (files.some(file => file.includes('.test.') || file.includes('.spec.') || 
       file.includes('test/') || file.includes('tests/') || file.includes('__tests__/')))) {
    moments.push({
      type: KEY_MOMENT_TYPES.TEST_ADDED,
      title: "–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç",
      summary: `–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.TEST_ADDED],
      files: files
    });
  }
  
  return moments;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
async function autoSaveKeyMoments(toolName, args, content = "", files = []) {
  try {
    const detectedMoments = autoDetectKeyMoments(toolName, args, content, files);
    
    if (detectedMoments.length === 0) {
      return detectedMoments; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const sessionId = await getOrCreateSession();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
    for (const moment of detectedMoments) {
      try {
        await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/key-moment`, {
          moment_type: moment.type,
          title: moment.title,
          summary: moment.summary,
          files_involved: moment.files || [],
          importance: moment.importance
        });
        
        console.error(`üéØ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: ${moment.title} (${moment.type})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞ ${moment.title}:`, error.message);
      }
    }
    
    return detectedMoments;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:`, error.message);
    return [];
  }
}

// API endpoint –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ (–æ—Ç Claude File Watcher)
async function handleExternalAutoAnalysis(analysisData) {
  try {
    const { tool_name, args, content, files } = analysisData;
    
    console.error(`üîç –í–Ω–µ—à–Ω–∏–π –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑: ${tool_name} –¥–ª—è ${files.join(', ')}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—é
    const detectedMoments = await autoSaveKeyMoments(tool_name, args || {}, content, files);
    
    return {
      success: true,
      moments_detected: detectedMoments.length,
      moments: detectedMoments.map(m => ({
        type: m.type,
        title: m.title,
        importance: m.importance
      }))
    };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞:`, error.message);
    return {
      success: false,
      moments_detected: 0,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º—É
async function logToolCall(toolName, args, result, success) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const sessionId = await getOrCreateSession();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
    await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/message`, {
      role: "assistant",
      content: `MCP Tool: ${toolName} - ${success ? 'Success' : 'Failed'}`,
      actions: [toolName],
      files: result?.files || []
    }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  } catch (error) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error(`üìù –õ–æ–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName}: ${success ? 'Success' : 'Failed'}`);
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "ask_rag",
        description: "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ Laravel, Vue.js, Filament –∏ –¥—Ä. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏—é.",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–í–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã",
            },
            framework: {
              type: "string",
              description: "–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞: laravel, vue, filament, alpine, inertia, tailwindcss",
              enum: ["laravel", "vue", "filament", "alpine", "inertia", "tailwindcss"],
            },
            max_results: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)",
              default: 5,
            },
          },
          required: ["query"],
        },
      },
      {
        name: "list_frameworks",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_stats",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_recent_changes",
        description: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏",
        inputSchema: {
          type: "object",
          properties: {
            limit: {
              type: "number",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)",
              default: 10,
            },
          },
        },
      },
      {
        name: "save_key_moment",
        description: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞)",
        inputSchema: {
          type: "object",
          properties: {
            title: {
              type: "string",
              description: "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞",
            },
            summary: {
              type: "string", 
              description: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ",
            },
            type: {
              type: "string",
              description: "–¢–∏–ø –º–æ–º–µ–Ω—Ç–∞",
              enum: ["error_solved", "feature_completed", "config_changed", "breakthrough", "file_created", "deployment", "important_decision", "refactoring"],
              default: "feature_completed"
            },
            files: {
              type: "array",
              items: { type: "string" },
              description: "–°–ø–∏—Å–æ–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤",
              default: []
            },
            importance: {
              type: "number",
              description: "–í–∞–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10",
              minimum: 1,
              maximum: 10,
              default: 5
            }
          },
          required: ["title", "summary"],
        },
      },
      {
        name: "open_file",
        description: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–Ω–∏–º–∫–∞",
        inputSchema: {
          type: "object",
          properties: {
            path: {
              type: "string",
              description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è",
            },
          },
          required: ["path"],
        },
      },
      {
        name: "search_files",
        description: "–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤",
            },
            language: {
              type: "string",
              description: "–§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (python, javascript, etc.)",
              default: "",
            },
            limit: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
              default: 10,
            },
          },
          required: ["query"],
        },
      },
      {
        name: "get_file_history",
        description: "–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
        inputSchema: {
          type: "object",
          properties: {
            file_path: {
              type: "string",
              description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
            },
          },
          required: ["file_path"],
        },
      },
      {
        name: "init_memory_bank",
        description: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Memory Bank —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
        inputSchema: {
          type: "object",
          properties: {
            project_root: {
              type: "string",
              description: "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)",
              default: "",
            },
          },
        },
      },
      {
        name: "get_memory_context",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Memory Bank",
        inputSchema: {
          type: "object",
          properties: {
            context_type: {
              type: "string",
              description: "–¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: project, active, progress, decisions, patterns",
              enum: ["project", "active", "progress", "decisions", "patterns"],
              default: "active",
            },
          },
        },
      },
      {
        name: "update_active_context",
        description: "–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏",
        inputSchema: {
          type: "object",
          properties: {
            session_state: {
              type: "string",
              description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏",
            },
            tasks: {
              type: "array",
              items: { type: "string" },
              description: "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á",
              default: [],
            },
            decisions: {
              type: "array",
              items: { type: "string" },
              description: "–°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ä–µ—à–µ–Ω–∏–π",
              default: [],
            },
          },
          required: ["session_state"],
        },
      },
      {
        name: "log_decision",
        description: "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ Memory Bank",
        inputSchema: {
          type: "object",
          properties: {
            title: {
              type: "string",
              description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            },
            context: {
              type: "string",
              description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ—à–µ–Ω–∏—è",
            },
            decision: {
              type: "string",
              description: "–ü—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            },
            consequences: {
              type: "string",
              description: "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ –≤–ª–∏—è–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            },
          },
          required: ["title", "context", "decision"],
        },
      },
      {
        name: "search_memory_bank",
        description: "–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É Memory Bank —Ñ–∞–π–ª–æ–≤",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            },
          },
          required: ["query"],
        },
      },
      {
        name: "search_symbols",
        description: "–ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ) —Å AST-–∞–Ω–∞–ª–∏–∑–æ–º",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Å–∏–º–≤–æ–ª–∞",
            },
            symbol_type: {
              type: "string",
              description: "–¢–∏–ø —Å–∏–º–≤–æ–ª–∞: function, class, variable, import",
              default: "",
            },
            language: {
              type: "string",
              description: "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: python, javascript, typescript",
              default: "",
            },
            limit: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
              default: 20,
            },
          },
          required: ["query"],
        },
      },
      {
        name: "enhance_prompt",
        description: "–ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º—Ç–æ–≤ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é LLM",
        inputSchema: {
          type: "object",
          properties: {
            prompt: {
              type: "string",
              description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è",
            },
            force_enhance: {
              type: "boolean",
              description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–∞–∂–µ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–æ–º—Ç–æ–≤",
              default: false,
            },
            analysis_only: {
              type: "boolean", 
              description: "–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è",
              default: false,
            },
          },
          required: ["prompt"],
        },
      },
      {
        name: "analyze_prompt",
        description: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º—Ç–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ LLM",
        inputSchema: {
          type: "object",
          properties: {
            prompt: {
              type: "string",
              description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            },
          },
          required: ["prompt"],
        },
      },
      {
        name: "process_prompt_with_triggers",
        description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è (–¥–æ–±–∞–≤—å—Ç–µ ??? –≤ –∫–æ–Ω–µ—Ü –ø—Ä–æ–º—Ç–∞)",
        inputSchema: {
          type: "object",
          properties: {
            prompt: {
              type: "string",
              description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç. –î–æ–±–∞–≤—å—Ç–µ ??? –≤ –∫–æ–Ω–µ—Ü –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è",
            },
            project_context: {
              type: "object",
              description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
              default: {},
            },
          },
          required: ["prompt"],
        },
      },
      {
        name: "smart_process_prompt",
        description: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º",
        inputSchema: {
          type: "object",
          properties: {
            prompt: {
              type: "string",
              description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            },
            threshold: {
              type: "number",
              description: "–ü–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è (0.0-1.0)",
              default: 0.3,
            },
            max_time: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
              default: 5.0,
            },
          },
          required: ["prompt"],
        },
      },
      {
        name: "should_process_prompt",
        description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–º—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        inputSchema: {
          type: "object",
          properties: {
            prompt: {
              type: "string",
              description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            },
            threshold: {
              type: "number",
              description: "–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º—Ç–∞ (0.0-1.0)",
              default: 0.3,
            },
          },
          required: ["prompt"],
        },
      },
      {
        name: "get_session_summary",
        description: "–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ",
        inputSchema: {
          type: "object",
          properties: {
            days_back: {
              type: "number",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –æ–±–∑–æ—Ä–∞",
              default: 1,
            },
          },
        },
      },
      {
        name: "get_project_status",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_recent_work",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é —Ä–∞–±–æ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π",
        inputSchema: {
          type: "object",
          properties: {
            days_back: {
              type: "number",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
              default: 3,
            },
          },
        },
      },
      {
        name: "initialize_context",
        description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ Claude",
        inputSchema: {
          type: "object",
          properties: {
            include_code_examples: {
              type: "boolean",
              description: "–í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç",
              default: true,
            },
          },
        },
      },
      {
        name: "search_project_memory",
        description: "–ü–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–¥, —Ä–µ—à–µ–Ω–∏—è, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã)",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
            },
            content_type: {
              type: "string",
              description: "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: code, decision, key_moment, session"
            },
            session_id: {
              type: "string",
              description: "ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
            },
            min_importance: {
              type: "number",
              description: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å (0-10)",
              default: 0
            },
            limit: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
              default: 5
            }
          },
          required: ["query"]
        }
      },
      {
        name: "add_project_memory",
        description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞",
        inputSchema: {
          type: "object",
          properties: {
            content_type: {
              type: "string",
              description: "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: code, decision, key_moment, session"
            },
            title: {
              type: "string",
              description: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏"
            },
            content: {
              type: "string",
              description: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏"
            },
            session_id: {
              type: "string",
              description: "ID —Å–µ—Å—Å–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            },
            file_path: {
              type: "string",
              description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            },
            importance: {
              type: "number",
              description: "–í–∞–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (1-10)",
              default: 5
            },
            metadata: {
              type: "object",
              description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"
            }
          },
          required: ["content_type", "title", "content"]
        }
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    let result;
    
    switch (name) {
      case "ask_rag": {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        const sessionId = await getOrCreateSession();
        
        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
          const searchParams = {
            query: args.query,
            framework: args.framework || null,
            include_project_memory: true,  // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
            include_framework_docs: true,  // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            limit_per_source: args.max_results || 3
          };
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π unified RAG endpoint
          const response = await axios.post(`${RAG_SERVER_URL}/unified-rag/search`, searchParams);
          
          if (response.status === 200) {
            const data = response.data;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            let answer = `# üéØ –û—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${args.query}"\n\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
            if (data.framework_docs && data.framework_docs.length > 0) {
              answer += `## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤\n\n`;
              data.framework_docs.forEach((doc, i) => {
                const framework = doc.metadata.framework || 'unknown';
                const title = doc.metadata.title || `–î–æ–∫—É–º–µ–Ω—Ç ${i+1}`;
                const relevance = (doc.relevance_score * 100).toFixed(1);
                
                answer += `### ${i+1}. [${framework.toUpperCase()}] ${title} (${relevance}%)\n`;
                answer += `${doc.content.substring(0, 800)}...\n\n`;
              });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏
            if (data.project_memory && data.project_memory.length > 0) {
              answer += `## üß† –ü–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
              data.project_memory.forEach((memory, i) => {
                const contentType = memory.metadata.content_type || 'unknown';
                const title = memory.metadata.title || `–ó–∞–ø–∏—Å—å ${i+1}`;
                const relevance = (memory.relevance_score * 100).toFixed(1);
                const importance = memory.metadata.importance || 5;
                
                answer += `### ${i+1}. [${contentType.toUpperCase()}] ${title} (${relevance}%, –≤–∞–∂–Ω–æ—Å—Ç—å: ${importance})\n`;
                answer += `${memory.content.substring(0, 600)}...\n\n`;
              });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            answer += `## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞\n`;
            answer += `- –û–±—â–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(data.combined_score * 100).toFixed(1)}%\n`;
            answer += `- –ù–∞–π–¥–µ–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${data.framework_docs.length}\n`;
            answer += `- –ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${data.project_memory.length}\n`;
            answer += `- –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${data.total_results}\n`;
            
            if (data.total_results === 0) {
              answer = `–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${args.query}".\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ (framework: "laravel", "vue", "filament")`;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏—é
            await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/message`, {
              role: "user",
              content: `RAG Query: ${args.query}`,
              actions: ["ask_rag"],
              files: []
            }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
            await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/message`, {
              role: "assistant", 
              content: answer,
              actions: ["ask_rag"],
              files: data.framework_docs.concat(data.project_memory).map(r => r.metadata.file_path || "").filter(Boolean)
            }).catch(() => {});
            
            const cleanedAnswer = cleanRAGResponse(answer);
            
            await logToolCall(name, args, { answer: cleanedAnswer, sources: data.total_results }, true);
            
            // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ RAG –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
            await autoSaveKeyMoments(name, args, `${args.query} ${cleanedAnswer}`, []);
            
            return {
              content: [
                {
                  type: "text",
                  text: cleanedAnswer,
                },
              ],
            };
          } else {
            throw new Error(`RAG —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ unified RAG: ${error.message}`);
          await logToolCall(name, args, { error: error.message }, false);
          
          return {
            content: [
              {
                type: "text", 
                text: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ RAG —Å–∏—Å—Ç–µ–º–µ: ${error.message}`,
              },
            ],
          };
        }
      }

      case "list_frameworks": {
        const response = await axios.get(`${RAG_SERVER_URL}/frameworks`);
        const statsResponse = await axios.get(`${RAG_SERVER_URL}/stats`);
        
        const frameworks = Object.entries(response.data).map(([key, info]) => {
          const docCount = statsResponse.data.frameworks[key.toUpperCase()] || 0;
          return `- **${key}**: ${info.name} - ${info.description} (${docCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`;
        }).join('\n');
        
        result = { frameworks: response.data, stats: statsResponse.data.frameworks };
        await logToolCall(name, args, result, true);
        
        return {
          content: [
            {
              type: "text",
              text: `üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏:**\n\n${frameworks}\n\nüìä **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${statsResponse.data.total_documents}`,
            },
          ],
        };
      }

      case "get_stats": {
        const response = await axios.get(`${RAG_SERVER_URL}/stats`);
        const stats = response.data;
        
        const frameworkStats = Object.entries(stats.frameworks || {})
          .map(([key, count]) => `- **${key}**: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
          .join('\n');
        
        result = stats;
        await logToolCall(name, args, result, true);
        
        return {
          content: [
            {
              type: "text",
              text: `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã:**\n\n**–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${stats.total_documents || 0}\n\n**–ü–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º:**\n${frameworkStats}\n\n**–†–∞–∑–º–µ—Ä –∫—ç—à–∞:** ${stats.cache_size || 0}`,
            },
          ],
        };
      }

      case "get_recent_changes": {
        try {
          // –ü–†–û–°–¢–û–ô –¢–ï–°–¢ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
          const testMessage = `üîÑ **–¢–ï–°–¢: –§—É–Ω–∫—Ü–∏—è get_recent_changes –≤—ã–∑–≤–∞–Ω–∞!**\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}\nURL: ${RAG_SERVER_URL}\n–ü—Ä–æ–µ–∫—Ç: ${getCurrentProjectName()}`;
          
          const response = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
          const data = response.data;
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–∞–º
          let moments = null;
          let source = "";
          
          if (data && data.context && data.context.key_moments && Array.isArray(data.context.key_moments)) {
            moments = data.context.key_moments;
            source = "data.context.key_moments";
          } else if (data && data.key_moments && Array.isArray(data.key_moments)) {
            moments = data.key_moments;
            source = "data.key_moments";
          }
          
          if (!moments || moments.length === 0) {
            return {
              content: [{
                type: "text",
                text: `${testMessage}\n\n‚ùå **–ü—Ä–æ–±–ª–µ–º–∞:** –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:**\n- –ü–æ–ª—è –≤ data: ${Object.keys(data || {}).join(', ')}\n- context —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!(data && data.context)}\n- –ü–æ–ª—è –≤ context: ${data && data.context ? Object.keys(data.context).join(', ') : '–Ω–µ—Ç'}`
              }]
            };
          }
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤
          const formatted = moments.slice(0, args.limit || 5).map((m, i) => 
            `${i+1}. **${m.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}** (${m.type || 'unknown'})\n   ${(m.summary || '').substring(0, 100)}...`
          ).join('\n\n');
          
          return {
            content: [{
              type: "text", 
              text: `${testMessage}\n\n‚úÖ **–£—Å–ø–µ—Ö!** –ù–∞–π–¥–µ–Ω–æ ${moments.length} –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤\n**–ò—Å—Ç–æ—á–Ω–∏–∫:** ${source}\n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–º–µ–Ω—Ç—ã:**\n\n${formatted}`
            }]
          };
          
        } catch (error) {
          return {
            content: [{
              type: "text",
              text: `üîÑ **–¢–ï–°–¢: –§—É–Ω–∫—Ü–∏—è get_recent_changes –≤—ã–∑–≤–∞–Ω–∞!**\n\n‚ùå **–û—à–∏–±–∫–∞:** ${error.message}\n\n**–î–µ—Ç–∞–ª–∏:**\n- URL: ${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}\n- –í—Ä–µ–º—è: ${new Date().toLocaleString()}`
            }]
          };
        }
      }

      case "save_key_moment": {
        try {
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
          const sessionId = await getOrCreateSession();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
          const momentResponse = await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/key-moment`, {
            moment_type: args.type || 'feature_completed',
            title: args.title,
            summary: args.summary,
            files_involved: args.files || [],
            importance: args.importance || 5
          });
          
          result = { saved: true, session_id: sessionId };
          await logToolCall(name, args, result, true);
          
          // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
          await autoSaveKeyMoments(name, args, `${args.title} ${args.summary}`, args.files || []);
          
          return {
            content: [
              {
                type: "text",
                text: `‚úÖ **–ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${args.title}\n**–¢–∏–ø:** ${args.type || 'feature_completed'}\n**–û–ø–∏—Å–∞–Ω–∏–µ:** ${args.summary}\n**–°–µ—Å—Å–∏—è:** ${sessionId}`,
              },
            ],
          };
        } catch (error) {
          return {
            content: [
              {
                type: "text",
                text: `‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞**\n\n${error.message}`,
              },
            ],
          };
        }
      }

      case "open_file": {
        const filePath = args.path;
        
        if (!filePath) {
          throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä path –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –∏–∑ HTTP —Å–µ—Ä–≤–µ—Ä–∞)
        const normalizedPath = path.normalize(filePath);
        const absolutePath = path.isAbsolute(normalizedPath) ? normalizedPath : path.resolve(normalizedPath);
        
        // –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        const forbiddenPaths = [
          '/etc/',
          '/sys/', 
          '/proc/',
          '/root/',
          'C:\\Windows\\',
          'C:\\System'
        ];
        
        if (absolutePath.includes('.ssh') || 
            forbiddenPaths.some(forbidden => absolutePath.toLowerCase().includes(forbidden.toLowerCase())) ||
            (normalizedPath.includes('..') && (normalizedPath.includes('etc') || normalizedPath.includes('ssh')))) {
          throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª');
        }

        try {
          const content = await fs.readFile(filePath, 'utf8');
          
          // –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Ñ–∞–π–ª–∞
          const sessionId = await getOrCreateSession();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
          try {
            const snapshotResponse = await axios.post(`${RAG_SERVER_URL}/file-snapshots/save`, {
              session_id: sessionId,
              file_path: filePath,
              content: content
            });
            
            console.error(`üì∏ –°–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${snapshotResponse.data.snapshot_id}`);
          } catch (snapshotError) {
            console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–∞: ${snapshotError.message}`);
          }
          
          result = { content, path: filePath };
          await logToolCall(name, args, result, true);
          
          // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
          await autoSaveKeyMoments(name, args, content, [filePath]);
          
          return {
            content: [
              {
                type: "text",
                text: `üìÅ **–§–∞–π–ª:** ${filePath}\n\n\`\`\`\n${content}\n\`\`\``,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
      }

      case "search_files": {
        try {
          // –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          const sessionId = await getOrCreateSession();
          
          const response = await axios.get(`${RAG_SERVER_URL}/sessions/${sessionId}/search/files`, {
            params: {
              query: args.query,
              language: args.language || "",
              limit: args.limit || 10
            }
          });
          
          const results = response.data.results;
          const totalFound = response.data.total_found;
          
          let resultText = `üîç **–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º:** "${args.query}"\n\n`;
          resultText += `üìä **–ù–∞–π–¥–µ–Ω–æ:** ${totalFound} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
          
          if (args.language) {
            resultText += `üè∑Ô∏è **–§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É:** ${args.language}\n\n`;
          }
          
          if (results.length === 0) {
            resultText += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
          } else {
            resultText += "üìÇ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n";
            results.forEach((result, index) => {
              resultText += `${index + 1}. **${result.file_path}** (${result.language})\n`;
              resultText += `   ${result.content_preview.substring(0, 100)}...\n\n`;
            });
          }
          
          result = { query: args.query, results, total_found: totalFound };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º: ${error.message}`);
        }
      }

      case "get_file_history": {
        try {
          // –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è URL
          const encodedPath = encodeURIComponent(args.file_path);
          const response = await axios.get(`${RAG_SERVER_URL}/file-snapshots/history/${encodedPath}`);
          
          const history = response.data.history;
          const totalVersions = response.data.total_versions;
          
          let resultText = `üìö **–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–∞:** ${args.file_path}\n\n`;
          resultText += `üìä **–í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π:** ${totalVersions}\n\n`;
          
          if (history.length === 0) {
            resultText += "‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
          } else {
            resultText += "üóÇÔ∏è **–í–µ—Ä—Å–∏–∏:**\n\n";
            history.forEach((version, index) => {
              const date = new Date(version.timestamp * 1000).toLocaleString();
              resultText += `${index + 1}. **${version.content_hash.substring(0, 8)}** (${version.size_bytes} –±–∞–π—Ç) - ${date}\n`;
            });
          }
          
          result = { file_path: args.file_path, history, total_versions: totalVersions };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        }
      }

      case "init_memory_bank": {
        try {
          const projectRoot = args.project_root || getCurrentProjectRoot();
          
          const response = await axios.post(`${RAG_SERVER_URL}/memory-bank/init`, {
            project_root: projectRoot
          });
          
          result = { initialized: true, project_root: projectRoot };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üè¶ **Memory Bank –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω**\n\n**–ü—Ä–æ–µ–∫—Ç:** ${projectRoot}\n**–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${response.data.files_created || 5}\n\nüìÇ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n- project-context.md - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞\n- active-context.md - –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏\n- progress.md - –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n- decisions.md - –õ–æ–≥ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n- code-patterns.md - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–¥–∞`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Memory Bank: ${error.message}`);
        }
      }

      case "get_memory_context": {
        try {
          const contextType = args.context_type || "active";
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
          const projectRoot = getCurrentProjectRoot();
          
          const response = await axios.get(`${RAG_SERVER_URL}/memory-bank/context`, {
            params: {
              context_type: contextType,
              project_root: projectRoot
            }
          });
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API
          const content = response.data.content || "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω";
          const filename = response.data.filename || `${contextType}.md`;
          
          result = { context_type: contextType, content, filename };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üè¶ **Memory Bank - ${contextType.toUpperCase()}**\n\nüìÅ **–§–∞–π–ª:** ${filename}\n\n---\n\n${content}`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Memory Bank: ${error.message}`);
        }
      }

      case "update_active_context": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/memory-bank/update-active-context`, {
            project_root: getCurrentProjectRoot(),
            session_state: args.session_state,
            tasks: args.tasks || [],
            decisions: args.decisions || []
          });
          
          result = { updated: true, session_state: args.session_state };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n**–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:** ${args.session_state}\n**–ó–∞–¥–∞—á:** ${(args.tasks || []).length}\n**–†–µ—à–µ–Ω–∏–π:** ${(args.decisions || []).length}`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`);
        }
      }

      case "log_decision": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/memory-bank/add-decision`, {
            project_root: getCurrentProjectRoot(),
            title: args.title,
            context: args.context,
            decision: args.decision,
            consequences: args.consequences || ""
          });
          
          result = { logged: true, title: args.title };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üìù **–†–µ—à–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ**\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${args.title}\n**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** ${args.context}\n**–†–µ—à–µ–Ω–∏–µ:** ${args.decision}\n${args.consequences ? `**–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:** ${args.consequences}` : ''}`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è: ${error.message}`);
        }
      }

      case "search_memory_bank": {
        try {
          const response = await axios.get(`${RAG_SERVER_URL}/memory-bank/search`, {
            params: {
              query: args.query,
              project_root: getCurrentProjectRoot()
            }
          });
          
          const results = response.data.results;
          const totalFound = response.data.total_found;
          
          let resultText = `üîç **–ü–æ–∏—Å–∫ –≤ Memory Bank:** "${args.query}"\n\n`;
          resultText += `üìä **–ù–∞–π–¥–µ–Ω–æ:** ${totalFound} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
          
          if (results.length === 0) {
            resultText += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
          } else {
            resultText += "üìÇ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n";
            results.forEach((result, index) => {
              resultText += `${index + 1}. **${result.filename}**\n`;
              resultText += `   ${result.preview.substring(0, 150)}...\n\n`;
            });
          }
          
          result = { query: args.query, results, total_found: totalFound };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Memory Bank: ${error.message}`);
        }
      }

      case "search_symbols": {
        try {
          // –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          const sessionId = await getOrCreateSession();
          
          const response = await axios.get(`${RAG_SERVER_URL}/sessions/${sessionId}/search/symbols`, {
            params: {
              query: args.query,
              symbol_type: args.symbol_type || "",
              language: args.language || "",
              limit: args.limit || 20
            }
          });
          
          const results = response.data.results;
          const totalFound = response.data.total_found;
          
          let resultText = `üîç **–ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤:** "${args.query}"\n\n`;
          resultText += `üìä **–ù–∞–π–¥–µ–Ω–æ:** ${totalFound} —Å–∏–º–≤–æ–ª–æ–≤\n\n`;
          
          if (args.symbol_type) {
            resultText += `üè∑Ô∏è **–¢–∏–ø:** ${args.symbol_type}\n`;
          }
          if (args.language) {
            resultText += `üíª **–Ø–∑—ã–∫:** ${args.language}\n`;
          }
          if (args.symbol_type || args.language) {
            resultText += '\n';
          }
          
          if (results.length === 0) {
            resultText += "‚ùå –°–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
          } else {
            resultText += "üéØ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:**\n\n";
            results.forEach((symbol, index) => {
              const typeEmoji = symbol.symbol_type === 'function' ? 'üîß' : 
                              symbol.symbol_type === 'class' ? 'üì¶' : 
                              symbol.symbol_type === 'variable' ? 'üìù' : 'üì•';
              
              resultText += `${index + 1}. ${typeEmoji} **${symbol.name}** (${symbol.symbol_type})\n`;
              resultText += `   üìÅ ${symbol.file_path}:${symbol.start_line}\n`;
              resultText += `   ‚ö° \`${symbol.signature.substring(0, 80)}${symbol.signature.length > 80 ? '...' : ''}\`\n`;
              
              if (symbol.docstring && symbol.docstring.trim()) {
                resultText += `   üìñ ${symbol.docstring.substring(0, 100)}${symbol.docstring.length > 100 ? '...' : ''}\n`;
              }
              
              resultText += '\n';
            });
          }
          
          result = { query: args.query, results, total_found: totalFound };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: ${error.message}`);
        }
      }

      case "enhance_prompt": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/prompt/enhance`, {
            prompt: args.prompt,
            project_context: { project_root: getCurrentProjectRoot() },
            force_enhance: args.force_enhance || false
          });
          
          const enhanced = response.data;
          result = enhanced;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `‚ú® **–ü—Ä–æ–º—Ç —É–ª—É—á—à–µ–Ω!**\n\n`;
          resultText += `**–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º—Ç:**\n${enhanced.original_prompt}\n\n`;
          resultText += `**–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:**\n${enhanced.enhanced_prompt}\n\n`;
          resultText += `**–£–ª—É—á—à–µ–Ω–∏—è:** ${enhanced.improvements.join(', ')}\n`;
          resultText += `**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${enhanced.processing_time.toFixed(2)}—Å`;
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞: ${error.message}`);
        }
      }

      case "analyze_prompt": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/prompt/analyze`, {
            prompt: args.prompt,
            project_context: { project_root: getCurrentProjectRoot() }
          });
          
          const analysis = response.data;
          result = analysis;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `üîç **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º—Ç–∞:**\n\n`;
          resultText += `**–ü—Ä–æ–º—Ç:** ${args.prompt}\n\n`;
          resultText += `**–ù—É–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ:** ${analysis.needs_enhancement ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
          resultText += `**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** ${(analysis.confidence * 100).toFixed(1)}%\n`;
          resultText += `**–ù–∞–º–µ—Ä–µ–Ω–∏–µ:** ${analysis.estimated_intent}\n`;
          
          if (analysis.issues && analysis.issues.length > 0) {
            resultText += `**–ü—Ä–æ–±–ª–µ–º—ã:**\n`;
            analysis.issues.forEach((issue, i) => {
              resultText += `${i + 1}. ${issue}\n`;
            });
          }
          
          if (analysis.suggested_context && analysis.suggested_context.length > 0) {
            resultText += `**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:** ${analysis.suggested_context.join(', ')}`;
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º—Ç–∞: ${error.message}`);
        }
      }

      case "process_prompt_with_triggers": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/smart/process`, {
            prompt: args.prompt,
            context: args.project_context || { project_root: getCurrentProjectRoot() },
            project_context: { project_name: getCurrentProjectName(), project_root: getCurrentProjectRoot() }
          });
          
          const processing = response.data;
          result = processing;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö
          let resultText = `üöÄ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏:**\n\n`;
          
          if (processing.was_enhanced) {
            resultText += `‚ú® **–ü—Ä–æ–º—Ç –±—ã–ª —É–ª—É—á—à–µ–Ω!**\n\n`;
            resultText += `**–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º—Ç:**\n${processing.original_prompt}\n\n`;
            resultText += `**–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:**\n${processing.final_prompt}\n\n`;
            
            if (processing.metadata.trigger_used) {
              resultText += `**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä:** ${processing.metadata.trigger_used}\n`;
            }
            
            if (processing.metadata.improvements) {
              resultText += `**–£–ª—É—á—à–µ–Ω–∏—è:** ${processing.metadata.improvements.join(', ')}\n`;
            }
            
            resultText += `**–ü—Ä–∏—á–∏–Ω–∞:** ${processing.reasoning}\n`;
            resultText += `**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${processing.processing_time.toFixed(3)}—Å\n`;
            resultText += `**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** ${(processing.confidence * 100).toFixed(1)}%\n`;
            
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –≤ metadata
            if (processing.metadata && processing.metadata.trigger_used) {
              resultText += `üéØ **–¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –ø—Ä–æ–º—Ç –Ω–µ —É–ª—É—á—à–µ–Ω**\n\n`;
              resultText += `**–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º—Ç:** ${processing.original_prompt}\n\n`;
              resultText += `**–û—á–∏—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:** ${processing.final_prompt}\n\n`;
              resultText += `**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä:** ${processing.metadata.trigger_used}\n`;
              resultText += `**–ü—Ä–∏—á–∏–Ω–∞:** ${processing.reasoning}\n`;
              
              if (processing.metadata.improvements) {
                resultText += `**–ê–Ω–∞–ª–∏–∑:** ${processing.metadata.improvements.join(', ')}\n`;
              }
            } else {
              resultText += `üìù **–ü—Ä–æ–º—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π**\n\n`;
              resultText += `**–ü—Ä–æ–º—Ç:** ${processing.final_prompt}\n\n`;
              resultText += `**–ü—Ä–∏—á–∏–Ω–∞:** ${processing.reasoning}\n`;
              
              resultText += `\nüí° **–¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n`;
              resultText += `‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ **???** –≤ –∫–æ–Ω–µ—Ü –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è\n`;
            }
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º—Ç–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏: ${error.message}`);
        }
      }

      case "smart_process_prompt": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/smart/process`, {
            prompt: args.prompt,
            threshold: args.threshold || 0.3,
            max_time: args.max_time || 5.0,
            context: { project_root: getCurrentProjectRoot() },
            project_context: { project_name: getCurrentProjectName(), project_root: getCurrentProjectRoot() }
          });
          
          const processed = response.data;
          result = processed;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `üß† **Smart Processing —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n`;
          resultText += `**–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º—Ç:**\n${processed.original_prompt}\n\n`;
          
          if (processed.was_enhanced) {
            resultText += `**‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç:**\n${processed.final_prompt}\n\n`;
            resultText += `**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** ${(processed.confidence * 100).toFixed(1)}%\n`;
            resultText += `**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${processed.processing_time.toFixed(3)}—Å\n`;
            resultText += `**–ü—Ä–∏—á–∏–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è:** ${processed.reasoning}`;
            
            if (processed.metadata && processed.metadata.improvements) {
              resultText += `\n**–£–ª—É—á—à–µ–Ω–∏—è:** ${processed.metadata.improvements.join(', ')}`;
            }
          } else {
            resultText += `**‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è**\n`;
            resultText += `**–ü—Ä–∏—á–∏–Ω–∞:** ${processed.reasoning}\n`;
            resultText += `**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** ${(processed.confidence * 100).toFixed(1)}%`;
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ smart processing: ${error.message}`);
        }
      }

      case "should_process_prompt": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/smart/should_process`, {
            prompt: args.prompt,
            threshold: args.threshold || 0.3,
            context: { project_root: getCurrentProjectRoot() }
          });
          
          const assessment = response.data;
          result = assessment;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `üîç **–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–º—Ç–∞:**\n\n`;
          resultText += `**–ü—Ä–æ–º—Ç:** ${args.prompt}\n\n`;
          resultText += `**–ù—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:** ${assessment.should_process ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
          resultText += `**–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** ${(assessment.quality_score * 100).toFixed(1)}% (${assessment.assessment})\n`;
          resultText += `**–î–ª–∏–Ω–∞ –ø—Ä–æ–º—Ç–∞:** ${assessment.prompt_length} —Å–∏–º–≤–æ–ª–æ–≤\n`;
          resultText += `**–ü—Ä–∏—á–∏–Ω–∞:** ${assessment.reason}`;
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º—Ç–∞: ${error.message}`);
        }
      }

      case "get_session_summary": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/sessions/summary`, {
            days_back: args.days_back || 1,
          });
          
          const summary = response.data;
          result = summary;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `üìä **–û–±–∑–æ—Ä —Ä–∞–±–æ—Ç—ã –∑–∞ ${summary.period}:**\n\n`;
          
          // –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
          if (summary.key_moments && summary.key_moments.total > 0) {
            resultText += `üî• **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:** ${summary.key_moments.total}\n`;
            resultText += `üìà **–í–∞–∂–Ω–æ—Å—Ç—å:** ${summary.key_moments.total_importance} –±–∞–ª–ª–æ–≤\n`;
            
            if (summary.key_moments.by_type && Object.keys(summary.key_moments.by_type).length > 0) {
              resultText += `**–ü–æ —Ç–∏–ø–∞–º:**\n`;
              Object.entries(summary.key_moments.by_type).forEach(([type, moments]) => {
                resultText += `  ‚Ä¢ ${type}: ${moments.length} —à—Ç.\n`;
              });
            }
            resultText += `\n`;
          }
          
          // –§–∞–π–ª—ã
          if (summary.files_changed && summary.files_changed.count > 0) {
            resultText += `üìÅ **–§–∞–π–ª—ã –∏–∑–º–µ–Ω–µ–Ω—ã:** ${summary.files_changed.count}\n`;
            if (summary.files_changed.list.length > 0) {
              resultText += `**–û—Å–Ω–æ–≤–Ω—ã–µ:**\n`;
              summary.files_changed.list.slice(0, 5).forEach(file => {
                resultText += `  ‚Ä¢ ${file}\n`;
              });
            }
            resultText += `\n`;
          }
          
          // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          if (summary.productivity_score !== undefined) {
            resultText += `‚ö° **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${summary.productivity_score}/100\n\n`;
          }
          
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          if (summary.recent_activity && summary.recent_activity.length > 0) {
            resultText += `üí¨ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
            summary.recent_activity.slice(0, 3).forEach(activity => {
              resultText += `  ‚Ä¢ ${activity.role}: ${activity.content}\n`;
            });
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è session summary: ${error.message}`);
        }
      }

      case "get_project_status": {
        try {
          const response = await axios.get(`${RAG_SERVER_URL}/sessions/project/status`);
          
          const status = response.data;
          result = status;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `üèóÔ∏è **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:**\n\n`;
          
          // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
          if (status.project_info && status.project_info.context) {
            resultText += `üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${status.project_info.context}\n\n`;
          }
          
          // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
          if (status.project_info && status.project_info.technologies && Object.keys(status.project_info.technologies).length > 0) {
            resultText += `üíª **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n`;
            Object.entries(status.project_info.technologies).forEach(([tech, count]) => {
              resultText += `  ‚Ä¢ ${tech}: ${count} —Ñ–∞–π–ª–æ–≤\n`;
            });
            resultText += `\n`;
          }
          
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          if (status.development_stats) {
            resultText += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:**\n`;
            resultText += `  ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: ${status.development_stats.total_moments}\n`;
            resultText += `  ‚Ä¢ –§–∞–π–ª—ã: ${status.development_stats.total_files}\n`;
            resultText += `  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ${status.development_stats.total_messages}\n\n`;
          }
          
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          if (status.last_activity) {
            const daysSince = status.days_since_last_activity;
            let activityMsg = '';
            if (daysSince < 1) {
              activityMsg = '–°–µ–≥–æ–¥–Ω—è';
            } else if (daysSince < 2) {
              activityMsg = '–í—á–µ—Ä–∞';
            } else {
              activityMsg = `${daysSince.toFixed(1)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
            }
            resultText += `‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${activityMsg}\n\n`;
          }
          
          // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
          if (status.project_info && status.project_info.active_files && status.project_info.active_files.length > 0) {
            resultText += `üìÅ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n`;
            status.project_info.active_files.slice(0, 5).forEach(file => {
              resultText += `  ‚Ä¢ ${file.file_path} (${file.activity_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n`;
            });
          }
          
          // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
          if (status.recent_decisions && status.recent_decisions.length > 0) {
            resultText += `\nüß† **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:**\n`;
            status.recent_decisions.slice(0, 3).forEach(decision => {
              resultText += `  ‚Ä¢ ${decision.title}\n`;
            });
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è project status: ${error.message}`);
        }
      }

      case "get_recent_work": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/sessions/work/recent`, {
            days_back: args.days_back || 3,
          });
          
          const work = response.data;
          result = work;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `üìÖ **–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞ ${work.period}:**\n\n`;
          
          // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          if (work.summary) {
            resultText += `üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
            resultText += `  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${work.summary.total_days_active}\n`;
            resultText += `  ‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: ${work.summary.total_moments}\n`;
            resultText += `  ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${work.summary.total_files_changed}\n`;
            resultText += `  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${work.summary.avg_daily_intensity}%\n`;
            if (work.summary.most_productive_day) {
              resultText += `  ‚Ä¢ –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: ${work.summary.most_productive_day}\n`;
            }
            resultText += `\n`;
          }
          
          // –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –ø–æ –¥–Ω—è–º
          if (work.timeline && work.timeline.length > 0) {
            resultText += `üìñ **–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –ø–æ –¥–Ω—è–º:**\n\n`;
            work.timeline.forEach((day, index) => {
              if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π
                resultText += `**${day.date}**\n`;
                if (day.intensity.intensity_score > 0) {
                  resultText += `  ‚ö° –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${day.intensity.intensity_score}%\n`;
                }
                
                if (day.moments && day.moments.length > 0) {
                  resultText += `  üî• –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n`;
                  day.moments.slice(0, 3).forEach(moment => {
                    resultText += `    ‚Ä¢ ${moment.title}\n`;
                  });
                }
                
                if (day.files_changed && day.files_changed.length > 0) {
                  resultText += `  üìÅ –§–∞–π–ª—ã: ${day.files_changed.slice(0, 3).map(f => f.file_path).join(', ')}\n`;
                }
                
                resultText += `\n`;
              }
            });
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è recent work: ${error.message}`);
        }
      }

      case "initialize_context": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/sessions/context/initialize`, {
            include_code_examples: args.include_code_examples !== false,
          });
          
          const context = response.data;
          result = context;
          await logToolCall(name, args, result, true);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          let resultText = `${context.welcome_message}\n\n`;
          
          // –û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
          if (context.project_overview) {
            resultText += `üèóÔ∏è **–û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞:**\n`;
            if (context.project_overview.description) {
              resultText += `${context.project_overview.description}\n\n`;
            }
            
            if (context.project_overview.technologies && Object.keys(context.project_overview.technologies).length > 0) {
              resultText += `üíª **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n`;
              Object.entries(context.project_overview.technologies).forEach(([tech, count]) => {
                resultText += `  ‚Ä¢ ${tech}: ${count} —Ñ–∞–π–ª–æ–≤\n`;
              });
              resultText += `\n`;
            }
          }
          
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          if (context.recent_activity && context.recent_activity.last_work) {
            resultText += `‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–±–æ—Ç–∞:** ${context.recent_activity.last_work.date}\n`;
            if (context.recent_activity.productivity_score > 0) {
              resultText += `‚ö° **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${context.recent_activity.productivity_score}%\n`;
            }
            resultText += `\n`;
          }
          
          // –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
          if (context.key_decisions && context.key_decisions.length > 0) {
            resultText += `üß† **–ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n`;
            context.key_decisions.slice(0, 3).forEach(decision => {
              resultText += `  ‚Ä¢ ${decision.title}\n`;
            });
            resultText += `\n`;
          }
          
          // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
          if (context.active_files && context.active_files.length > 0) {
            resultText += `üìÅ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n`;
            context.active_files.slice(0, 3).forEach(file => {
              resultText += `  ‚Ä¢ ${file.file_path} (${file.language})\n`;
            });
            resultText += `\n`;
          }
          
          // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          if (context.recommendations && context.recommendations.length > 0) {
            resultText += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
            context.recommendations.forEach(rec => {
              resultText += `  ‚Ä¢ ${rec}\n`;
            });
          }
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
          
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`);
        }
      }

      case "search_project_memory": {
        try {
          const searchParams = {
            query: args.query,
            content_type: args.content_type || null,
            session_id: args.session_id || null,
            min_importance: args.min_importance || 0,
            limit: args.limit || 5
          };
          
          const response = await axios.get(`${RAG_SERVER_URL}/unified-rag/search-memory`, {
            params: searchParams
          });
          
          if (response.status === 200) {
            const data = response.data;
            
            let result = `# üß† –ü–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞: "${args.query}"\n\n`;
            
            if (data.results && data.results.length > 0) {
              data.results.forEach((memory, i) => {
                const contentType = memory.metadata.content_type || 'unknown';
                const title = memory.metadata.title || `–ó–∞–ø–∏—Å—å ${i+1}`;
                const relevance = (memory.relevance_score * 100).toFixed(1);
                const importance = memory.metadata.importance || 5;
                const sessionId = memory.metadata.session_id || 'unknown';
                
                result += `## ${i+1}. [${contentType.toUpperCase()}] ${title}\n`;
                result += `**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** ${relevance}% | **–í–∞–∂–Ω–æ—Å—Ç—å:** ${importance} | **–°–µ—Å—Å–∏—è:** ${sessionId}\n\n`;
                result += `${memory.content}\n\n---\n\n`;
              });
              
              result += `**–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:** ${data.total_found} –∑–∞–ø–∏—Å–µ–π`;
            } else {
              result += `–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${args.query}".`;
            }
            
            await logToolCall(name, args, { found: data.total_found }, true);
            
            return {
              content: [
                {
                  type: "text",
                  text: result,
                },
              ],
            };
          } else {
            throw new Error(`–°—Ç–∞—Ç—É—Å ${response.status}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
          await logToolCall(name, args, { error: error.message }, false);
          
          return {
            content: [
              {
                type: "text",
                text: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`,
              },
            ],
          };
        }
      }

      case "add_project_memory": {
        try {
          const sessionId = await getOrCreateSession();
          
          const memoryData = {
            content_type: args.content_type,
            title: args.title,
            content: args.content,
            session_id: args.session_id || sessionId,
            file_path: args.file_path || "",
            importance: args.importance || 5,
            metadata: args.metadata || {}
          };
          
          const response = await axios.post(`${RAG_SERVER_URL}/unified-rag/add-project-memory`, memoryData);
          
          if (response.status === 200) {
            const data = response.data;
            
            await logToolCall(name, args, data, true);
            
            return {
              content: [
                {
                  type: "text",
                  text: `‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞\n\n**ID:** ${data.memory_id}\n**–¢–∏–ø:** ${data.content_type}\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${data.title}`,
                },
              ],
            };
          } else {
            throw new Error(`–°—Ç–∞—Ç—É—Å ${response.status}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
          await logToolCall(name, args, { error: error.message }, false);
          
          return {
            content: [
              {
                type: "text",
                text: `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`,
              },
            ],
          };
        }
      }

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${name}:`, error.message);
    
    await logToolCall(name, args, { error: error.message }, false);
    
    // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã (—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º)
    await autoSaveKeyMoments(name, args, `–û—à–∏–±–∫–∞ –≤ ${name}: ${error.message}`, []);
    
    return {
      content: [
        {
          type: "text",
          text: `‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}:**\n\n${error.message}\n\nüîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n- RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${RAG_SERVER_URL}\n- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`,
        },
      ],
      isError: true,
    };
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  
  console.error("üöÄ STDIO MCP Server –∑–∞–ø—É—â–µ–Ω –¥–ª—è Claude Code CLI - –í–ï–†–°–ò–Ø 3.0 –° MEMORY BANK!");
  console.error(`üìä RAG Backend: ${RAG_SERVER_URL}`);
  console.error("üîß RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ask_rag, list_frameworks, get_stats, get_recent_changes, save_key_moment");
  console.error("üìÅ FileSnapshot: open_file, search_files, get_file_history");
  console.error("üè¶ Memory Bank: init_memory_bank, get_memory_context, update_active_context, log_decision, search_memory_bank");
  console.error("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –ê–ö–¢–ò–í–ù–û");
  console.error("üéØ –î–µ—Ç–µ–∫—Ü–∏—è: –æ—à–∏–±–∫–∏, —Ñ–∞–π–ª—ã, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, —Ä–µ—à–µ–Ω–∏—è");
  console.error("üî• NEW: Memory Bank —Å–∏—Å—Ç–µ–º–∞ –ø–æ –ø—Ä–∏–º–µ—Ä—É Cursor/Cline!");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTTP —Å–µ—Ä–≤–µ—Ä–µ
export {
  autoDetectKeyMoments,
  autoSaveKeyMoments,
  handleExternalAutoAnalysis,
  KEY_MOMENT_TYPES,
  MOMENT_IMPORTANCE
};

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}